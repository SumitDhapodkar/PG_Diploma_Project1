
can_demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000241c  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080025a4  080025a4  000035a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080025bc  080025bc  0000400c  2**0
                  CONTENTS
  4 .ARM          00000008  080025bc  080025bc  000035bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080025c4  080025c4  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080025c4  080025c4  000035c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080025c8  080025c8  000035c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080025cc  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000400c  2**0
                  CONTENTS
 10 .bss          0000006c  2000000c  2000000c  0000400c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000078  20000078  0000400c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000564e  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001332  00000000  00000000  0000968a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000568  00000000  00000000  0000a9c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000003f1  00000000  00000000  0000af28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f3fd  00000000  00000000  0000b319  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00005b1a  00000000  00000000  0002a716  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bed96  00000000  00000000  00030230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000eefc6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000014d8  00000000  00000000  000ef00c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004d  00000000  00000000  000f04e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800258c 	.word	0x0800258c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	0800258c 	.word	0x0800258c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <HAL_CAN_RxFifo0MsgPendingCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
CAN_RxHeaderTypeDef RxHeader;
uint8_t RxData[8];

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b082      	sub	sp, #8
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 80004c0:	4b04      	ldr	r3, [pc, #16]	@ (80004d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c>)
 80004c2:	4a05      	ldr	r2, [pc, #20]	@ (80004d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x20>)
 80004c4:	2100      	movs	r1, #0
 80004c6:	6878      	ldr	r0, [r7, #4]
 80004c8:	f000 fdaa 	bl	8001020 <HAL_CAN_GetRxMessage>
	// process the message
}
 80004cc:	bf00      	nop
 80004ce:	3708      	adds	r7, #8
 80004d0:	46bd      	mov	sp, r7
 80004d2:	bd80      	pop	{r7, pc}
 80004d4:	2000006c 	.word	0x2000006c
 80004d8:	20000050 	.word	0x20000050

080004dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b08a      	sub	sp, #40	@ 0x28
 80004e0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e2:	f000 fa17 	bl	8000914 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e6:	f000 f835 	bl	8000554 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ea:	f000 f8f7 	bl	80006dc <MX_GPIO_Init>
  MX_CAN1_Init();
 80004ee:	f000 f89b 	bl	8000628 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_Start(&hcan1);
 80004f2:	4816      	ldr	r0, [pc, #88]	@ (800054c <main+0x70>)
 80004f4:	f000 fc80 	bl	8000df8 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 80004f8:	2102      	movs	r1, #2
 80004fa:	4814      	ldr	r0, [pc, #80]	@ (800054c <main+0x70>)
 80004fc:	f000 feb2 	bl	8001264 <HAL_CAN_ActivateNotification>
  if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader1, TxData1, &TxMailBox1) != HAL_OK)
	  Error_Handler();
  */
  // send second CAN message
  CAN_TxHeaderTypeDef TxHeader2;
  TxHeader2.DLC = 7;
 8000500:	2307      	movs	r3, #7
 8000502:	623b      	str	r3, [r7, #32]
  TxHeader2.RTR = CAN_RTR_DATA;
 8000504:	2300      	movs	r3, #0
 8000506:	61fb      	str	r3, [r7, #28]
  TxHeader2.IDE = CAN_ID_STD;
 8000508:	2300      	movs	r3, #0
 800050a:	61bb      	str	r3, [r7, #24]
  TxHeader2.StdId = 0x0AA;
 800050c:	23aa      	movs	r3, #170	@ 0xaa
 800050e:	613b      	str	r3, [r7, #16]
  TxHeader2.ExtId = 0x0000;
 8000510:	2300      	movs	r3, #0
 8000512:	617b      	str	r3, [r7, #20]
  TxHeader2.TransmitGlobalTime = DISABLE;
 8000514:	2300      	movs	r3, #0
 8000516:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  uint8_t TxData2[8] = "SUNBEAM";
 800051a:	4a0d      	ldr	r2, [pc, #52]	@ (8000550 <main+0x74>)
 800051c:	f107 0308 	add.w	r3, r7, #8
 8000520:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000524:	e883 0003 	stmia.w	r3, {r0, r1}
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader2, TxData2, &TxMailBox2) != HAL_OK)
 8000528:	1d3b      	adds	r3, r7, #4
 800052a:	f107 0208 	add.w	r2, r7, #8
 800052e:	f107 0110 	add.w	r1, r7, #16
 8000532:	4806      	ldr	r0, [pc, #24]	@ (800054c <main+0x70>)
 8000534:	f000 fca4 	bl	8000e80 <HAL_CAN_AddTxMessage>
 8000538:	4603      	mov	r3, r0
 800053a:	2b00      	cmp	r3, #0
 800053c:	d001      	beq.n	8000542 <main+0x66>
	  	  Error_Handler();
 800053e:	f000 f8f5 	bl	800072c <Error_Handler>
	  HAL_Delay(3000);
 8000542:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000546:	f000 fa57 	bl	80009f8 <HAL_Delay>
	  if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader2, TxData2, &TxMailBox2) != HAL_OK)
 800054a:	e7ed      	b.n	8000528 <main+0x4c>
 800054c:	20000028 	.word	0x20000028
 8000550:	080025a4 	.word	0x080025a4

08000554 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b094      	sub	sp, #80	@ 0x50
 8000558:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800055a:	f107 0320 	add.w	r3, r7, #32
 800055e:	2230      	movs	r2, #48	@ 0x30
 8000560:	2100      	movs	r1, #0
 8000562:	4618      	mov	r0, r3
 8000564:	f001 ffe6 	bl	8002534 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000568:	f107 030c 	add.w	r3, r7, #12
 800056c:	2200      	movs	r2, #0
 800056e:	601a      	str	r2, [r3, #0]
 8000570:	605a      	str	r2, [r3, #4]
 8000572:	609a      	str	r2, [r3, #8]
 8000574:	60da      	str	r2, [r3, #12]
 8000576:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000578:	2300      	movs	r3, #0
 800057a:	60bb      	str	r3, [r7, #8]
 800057c:	4b28      	ldr	r3, [pc, #160]	@ (8000620 <SystemClock_Config+0xcc>)
 800057e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000580:	4a27      	ldr	r2, [pc, #156]	@ (8000620 <SystemClock_Config+0xcc>)
 8000582:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000586:	6413      	str	r3, [r2, #64]	@ 0x40
 8000588:	4b25      	ldr	r3, [pc, #148]	@ (8000620 <SystemClock_Config+0xcc>)
 800058a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800058c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000590:	60bb      	str	r3, [r7, #8]
 8000592:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000594:	2300      	movs	r3, #0
 8000596:	607b      	str	r3, [r7, #4]
 8000598:	4b22      	ldr	r3, [pc, #136]	@ (8000624 <SystemClock_Config+0xd0>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	4a21      	ldr	r2, [pc, #132]	@ (8000624 <SystemClock_Config+0xd0>)
 800059e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005a2:	6013      	str	r3, [r2, #0]
 80005a4:	4b1f      	ldr	r3, [pc, #124]	@ (8000624 <SystemClock_Config+0xd0>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80005ac:	607b      	str	r3, [r7, #4]
 80005ae:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005b0:	2301      	movs	r3, #1
 80005b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005b4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005b8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ba:	2302      	movs	r3, #2
 80005bc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005be:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80005c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005c4:	2304      	movs	r3, #4
 80005c6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80005c8:	2348      	movs	r3, #72	@ 0x48
 80005ca:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005cc:	2302      	movs	r3, #2
 80005ce:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005d0:	2307      	movs	r3, #7
 80005d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005d4:	f107 0320 	add.w	r3, r7, #32
 80005d8:	4618      	mov	r0, r3
 80005da:	f001 fb47 	bl	8001c6c <HAL_RCC_OscConfig>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d001      	beq.n	80005e8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005e4:	f000 f8a2 	bl	800072c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005e8:	230f      	movs	r3, #15
 80005ea:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ec:	2302      	movs	r3, #2
 80005ee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f0:	2300      	movs	r3, #0
 80005f2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005f4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005f8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005fa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005fe:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000600:	f107 030c 	add.w	r3, r7, #12
 8000604:	2102      	movs	r1, #2
 8000606:	4618      	mov	r0, r3
 8000608:	f001 fda8 	bl	800215c <HAL_RCC_ClockConfig>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d001      	beq.n	8000616 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000612:	f000 f88b 	bl	800072c <Error_Handler>
  }
}
 8000616:	bf00      	nop
 8000618:	3750      	adds	r7, #80	@ 0x50
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	40023800 	.word	0x40023800
 8000624:	40007000 	.word	0x40007000

08000628 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b08a      	sub	sp, #40	@ 0x28
 800062c:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800062e:	4b29      	ldr	r3, [pc, #164]	@ (80006d4 <MX_CAN1_Init+0xac>)
 8000630:	4a29      	ldr	r2, [pc, #164]	@ (80006d8 <MX_CAN1_Init+0xb0>)
 8000632:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 18;
 8000634:	4b27      	ldr	r3, [pc, #156]	@ (80006d4 <MX_CAN1_Init+0xac>)
 8000636:	2212      	movs	r2, #18
 8000638:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_LOOPBACK;
 800063a:	4b26      	ldr	r3, [pc, #152]	@ (80006d4 <MX_CAN1_Init+0xac>)
 800063c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000640:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000642:	4b24      	ldr	r3, [pc, #144]	@ (80006d4 <MX_CAN1_Init+0xac>)
 8000644:	2200      	movs	r2, #0
 8000646:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000648:	4b22      	ldr	r3, [pc, #136]	@ (80006d4 <MX_CAN1_Init+0xac>)
 800064a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800064e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000650:	4b20      	ldr	r3, [pc, #128]	@ (80006d4 <MX_CAN1_Init+0xac>)
 8000652:	2200      	movs	r2, #0
 8000654:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000656:	4b1f      	ldr	r3, [pc, #124]	@ (80006d4 <MX_CAN1_Init+0xac>)
 8000658:	2200      	movs	r2, #0
 800065a:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800065c:	4b1d      	ldr	r3, [pc, #116]	@ (80006d4 <MX_CAN1_Init+0xac>)
 800065e:	2200      	movs	r2, #0
 8000660:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000662:	4b1c      	ldr	r3, [pc, #112]	@ (80006d4 <MX_CAN1_Init+0xac>)
 8000664:	2200      	movs	r2, #0
 8000666:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000668:	4b1a      	ldr	r3, [pc, #104]	@ (80006d4 <MX_CAN1_Init+0xac>)
 800066a:	2200      	movs	r2, #0
 800066c:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800066e:	4b19      	ldr	r3, [pc, #100]	@ (80006d4 <MX_CAN1_Init+0xac>)
 8000670:	2200      	movs	r2, #0
 8000672:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000674:	4b17      	ldr	r3, [pc, #92]	@ (80006d4 <MX_CAN1_Init+0xac>)
 8000676:	2200      	movs	r2, #0
 8000678:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800067a:	4816      	ldr	r0, [pc, #88]	@ (80006d4 <MX_CAN1_Init+0xac>)
 800067c:	f000 f9e0 	bl	8000a40 <HAL_CAN_Init>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8000686:	f000 f851 	bl	800072c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  CAN_FilterTypeDef FilterConfig;
  FilterConfig.SlaveStartFilterBank = 9; // CAN1-0 to 8, CAN2-9 to 27
 800068a:	2309      	movs	r3, #9
 800068c:	627b      	str	r3, [r7, #36]	@ 0x24
  FilterConfig.FilterActivation = CAN_FILTER_ENABLE;
 800068e:	2301      	movs	r3, #1
 8000690:	623b      	str	r3, [r7, #32]
  FilterConfig.FilterBank = 5; // Use any Filter from 0 to 8
 8000692:	2305      	movs	r3, #5
 8000694:	617b      	str	r3, [r7, #20]
  FilterConfig.FilterScale = CAN_FILTERSCALE_32BIT; // Use a 32-bit filter
 8000696:	2301      	movs	r3, #1
 8000698:	61fb      	str	r3, [r7, #28]
  FilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800069a:	2300      	movs	r3, #0
 800069c:	61bb      	str	r3, [r7, #24]
  FilterConfig.FilterMaskIdHigh = 0xFF00;
 800069e:	f44f 437f 	mov.w	r3, #65280	@ 0xff00
 80006a2:	60bb      	str	r3, [r7, #8]
  FilterConfig.FilterMaskIdLow = 0x0000;
 80006a4:	2300      	movs	r3, #0
 80006a6:	60fb      	str	r3, [r7, #12]
  FilterConfig.FilterIdHigh = 0x1500;
 80006a8:	f44f 53a8 	mov.w	r3, #5376	@ 0x1500
 80006ac:	603b      	str	r3, [r7, #0]
  FilterConfig.FilterIdLow = 0x0000;
 80006ae:	2300      	movs	r3, #0
 80006b0:	607b      	str	r3, [r7, #4]
  FilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80006b2:	2300      	movs	r3, #0
 80006b4:	613b      	str	r3, [r7, #16]

  if(HAL_CAN_ConfigFilter(&hcan1, &FilterConfig) != HAL_OK)
 80006b6:	463b      	mov	r3, r7
 80006b8:	4619      	mov	r1, r3
 80006ba:	4806      	ldr	r0, [pc, #24]	@ (80006d4 <MX_CAN1_Init+0xac>)
 80006bc:	f000 fabc 	bl	8000c38 <HAL_CAN_ConfigFilter>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <MX_CAN1_Init+0xa2>
	  Error_Handler();
 80006c6:	f000 f831 	bl	800072c <Error_Handler>
  /* USER CODE END CAN1_Init 2 */
}
 80006ca:	bf00      	nop
 80006cc:	3728      	adds	r7, #40	@ 0x28
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	20000028 	.word	0x20000028
 80006d8:	40006400 	.word	0x40006400

080006dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	b083      	sub	sp, #12
 80006e0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006e2:	2300      	movs	r3, #0
 80006e4:	607b      	str	r3, [r7, #4]
 80006e6:	4b10      	ldr	r3, [pc, #64]	@ (8000728 <MX_GPIO_Init+0x4c>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ea:	4a0f      	ldr	r2, [pc, #60]	@ (8000728 <MX_GPIO_Init+0x4c>)
 80006ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006f2:	4b0d      	ldr	r3, [pc, #52]	@ (8000728 <MX_GPIO_Init+0x4c>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006fa:	607b      	str	r3, [r7, #4]
 80006fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006fe:	2300      	movs	r3, #0
 8000700:	603b      	str	r3, [r7, #0]
 8000702:	4b09      	ldr	r3, [pc, #36]	@ (8000728 <MX_GPIO_Init+0x4c>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000706:	4a08      	ldr	r2, [pc, #32]	@ (8000728 <MX_GPIO_Init+0x4c>)
 8000708:	f043 0302 	orr.w	r3, r3, #2
 800070c:	6313      	str	r3, [r2, #48]	@ 0x30
 800070e:	4b06      	ldr	r3, [pc, #24]	@ (8000728 <MX_GPIO_Init+0x4c>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000712:	f003 0302 	and.w	r3, r3, #2
 8000716:	603b      	str	r3, [r7, #0]
 8000718:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800071a:	bf00      	nop
 800071c:	370c      	adds	r7, #12
 800071e:	46bd      	mov	sp, r7
 8000720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop
 8000728:	40023800 	.word	0x40023800

0800072c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000730:	b672      	cpsid	i
}
 8000732:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000734:	bf00      	nop
 8000736:	e7fd      	b.n	8000734 <Error_Handler+0x8>

08000738 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800073e:	2300      	movs	r3, #0
 8000740:	607b      	str	r3, [r7, #4]
 8000742:	4b10      	ldr	r3, [pc, #64]	@ (8000784 <HAL_MspInit+0x4c>)
 8000744:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000746:	4a0f      	ldr	r2, [pc, #60]	@ (8000784 <HAL_MspInit+0x4c>)
 8000748:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800074c:	6453      	str	r3, [r2, #68]	@ 0x44
 800074e:	4b0d      	ldr	r3, [pc, #52]	@ (8000784 <HAL_MspInit+0x4c>)
 8000750:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000752:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000756:	607b      	str	r3, [r7, #4]
 8000758:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	603b      	str	r3, [r7, #0]
 800075e:	4b09      	ldr	r3, [pc, #36]	@ (8000784 <HAL_MspInit+0x4c>)
 8000760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000762:	4a08      	ldr	r2, [pc, #32]	@ (8000784 <HAL_MspInit+0x4c>)
 8000764:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000768:	6413      	str	r3, [r2, #64]	@ 0x40
 800076a:	4b06      	ldr	r3, [pc, #24]	@ (8000784 <HAL_MspInit+0x4c>)
 800076c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800076e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000772:	603b      	str	r3, [r7, #0]
 8000774:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000776:	2007      	movs	r0, #7
 8000778:	f001 f89a 	bl	80018b0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800077c:	bf00      	nop
 800077e:	3708      	adds	r7, #8
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}
 8000784:	40023800 	.word	0x40023800

08000788 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b08a      	sub	sp, #40	@ 0x28
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000790:	f107 0314 	add.w	r3, r7, #20
 8000794:	2200      	movs	r2, #0
 8000796:	601a      	str	r2, [r3, #0]
 8000798:	605a      	str	r2, [r3, #4]
 800079a:	609a      	str	r2, [r3, #8]
 800079c:	60da      	str	r2, [r3, #12]
 800079e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	4a1d      	ldr	r2, [pc, #116]	@ (800081c <HAL_CAN_MspInit+0x94>)
 80007a6:	4293      	cmp	r3, r2
 80007a8:	d134      	bne.n	8000814 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	613b      	str	r3, [r7, #16]
 80007ae:	4b1c      	ldr	r3, [pc, #112]	@ (8000820 <HAL_CAN_MspInit+0x98>)
 80007b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007b2:	4a1b      	ldr	r2, [pc, #108]	@ (8000820 <HAL_CAN_MspInit+0x98>)
 80007b4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80007b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80007ba:	4b19      	ldr	r3, [pc, #100]	@ (8000820 <HAL_CAN_MspInit+0x98>)
 80007bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80007c2:	613b      	str	r3, [r7, #16]
 80007c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	60fb      	str	r3, [r7, #12]
 80007ca:	4b15      	ldr	r3, [pc, #84]	@ (8000820 <HAL_CAN_MspInit+0x98>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ce:	4a14      	ldr	r2, [pc, #80]	@ (8000820 <HAL_CAN_MspInit+0x98>)
 80007d0:	f043 0302 	orr.w	r3, r3, #2
 80007d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007d6:	4b12      	ldr	r3, [pc, #72]	@ (8000820 <HAL_CAN_MspInit+0x98>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007da:	f003 0302 	and.w	r3, r3, #2
 80007de:	60fb      	str	r3, [r7, #12]
 80007e0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80007e2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80007e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e8:	2302      	movs	r3, #2
 80007ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ec:	2300      	movs	r3, #0
 80007ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007f0:	2303      	movs	r3, #3
 80007f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80007f4:	2309      	movs	r3, #9
 80007f6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007f8:	f107 0314 	add.w	r3, r7, #20
 80007fc:	4619      	mov	r1, r3
 80007fe:	4809      	ldr	r0, [pc, #36]	@ (8000824 <HAL_CAN_MspInit+0x9c>)
 8000800:	f001 f898 	bl	8001934 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000804:	2200      	movs	r2, #0
 8000806:	2100      	movs	r1, #0
 8000808:	2014      	movs	r0, #20
 800080a:	f001 f85c 	bl	80018c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800080e:	2014      	movs	r0, #20
 8000810:	f001 f875 	bl	80018fe <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 8000814:	bf00      	nop
 8000816:	3728      	adds	r7, #40	@ 0x28
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	40006400 	.word	0x40006400
 8000820:	40023800 	.word	0x40023800
 8000824:	40020400 	.word	0x40020400

08000828 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800082c:	bf00      	nop
 800082e:	e7fd      	b.n	800082c <NMI_Handler+0x4>

08000830 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000834:	bf00      	nop
 8000836:	e7fd      	b.n	8000834 <HardFault_Handler+0x4>

08000838 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800083c:	bf00      	nop
 800083e:	e7fd      	b.n	800083c <MemManage_Handler+0x4>

08000840 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000844:	bf00      	nop
 8000846:	e7fd      	b.n	8000844 <BusFault_Handler+0x4>

08000848 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800084c:	bf00      	nop
 800084e:	e7fd      	b.n	800084c <UsageFault_Handler+0x4>

08000850 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000854:	bf00      	nop
 8000856:	46bd      	mov	sp, r7
 8000858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085c:	4770      	bx	lr

0800085e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800085e:	b480      	push	{r7}
 8000860:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000862:	bf00      	nop
 8000864:	46bd      	mov	sp, r7
 8000866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086a:	4770      	bx	lr

0800086c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000870:	bf00      	nop
 8000872:	46bd      	mov	sp, r7
 8000874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000878:	4770      	bx	lr

0800087a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800087a:	b580      	push	{r7, lr}
 800087c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800087e:	f000 f89b 	bl	80009b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000882:	bf00      	nop
 8000884:	bd80      	pop	{r7, pc}
	...

08000888 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800088c:	4802      	ldr	r0, [pc, #8]	@ (8000898 <CAN1_RX0_IRQHandler+0x10>)
 800088e:	f000 fd0f 	bl	80012b0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000892:	bf00      	nop
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	20000028 	.word	0x20000028

0800089c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008a0:	4b06      	ldr	r3, [pc, #24]	@ (80008bc <SystemInit+0x20>)
 80008a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80008a6:	4a05      	ldr	r2, [pc, #20]	@ (80008bc <SystemInit+0x20>)
 80008a8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80008ac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008b0:	bf00      	nop
 80008b2:	46bd      	mov	sp, r7
 80008b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b8:	4770      	bx	lr
 80008ba:	bf00      	nop
 80008bc:	e000ed00 	.word	0xe000ed00

080008c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80008c0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80008f8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80008c4:	f7ff ffea 	bl	800089c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80008c8:	480c      	ldr	r0, [pc, #48]	@ (80008fc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80008ca:	490d      	ldr	r1, [pc, #52]	@ (8000900 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80008cc:	4a0d      	ldr	r2, [pc, #52]	@ (8000904 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80008ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008d0:	e002      	b.n	80008d8 <LoopCopyDataInit>

080008d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008d6:	3304      	adds	r3, #4

080008d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008dc:	d3f9      	bcc.n	80008d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008de:	4a0a      	ldr	r2, [pc, #40]	@ (8000908 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80008e0:	4c0a      	ldr	r4, [pc, #40]	@ (800090c <LoopFillZerobss+0x22>)
  movs r3, #0
 80008e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008e4:	e001      	b.n	80008ea <LoopFillZerobss>

080008e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008e8:	3204      	adds	r2, #4

080008ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008ec:	d3fb      	bcc.n	80008e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008ee:	f001 fe29 	bl	8002544 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008f2:	f7ff fdf3 	bl	80004dc <main>
  bx  lr    
 80008f6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80008f8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80008fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000900:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000904:	080025cc 	.word	0x080025cc
  ldr r2, =_sbss
 8000908:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800090c:	20000078 	.word	0x20000078

08000910 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000910:	e7fe      	b.n	8000910 <ADC_IRQHandler>
	...

08000914 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000918:	4b0e      	ldr	r3, [pc, #56]	@ (8000954 <HAL_Init+0x40>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	4a0d      	ldr	r2, [pc, #52]	@ (8000954 <HAL_Init+0x40>)
 800091e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000922:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000924:	4b0b      	ldr	r3, [pc, #44]	@ (8000954 <HAL_Init+0x40>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	4a0a      	ldr	r2, [pc, #40]	@ (8000954 <HAL_Init+0x40>)
 800092a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800092e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000930:	4b08      	ldr	r3, [pc, #32]	@ (8000954 <HAL_Init+0x40>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4a07      	ldr	r2, [pc, #28]	@ (8000954 <HAL_Init+0x40>)
 8000936:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800093a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800093c:	2003      	movs	r0, #3
 800093e:	f000 ffb7 	bl	80018b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000942:	2000      	movs	r0, #0
 8000944:	f000 f808 	bl	8000958 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000948:	f7ff fef6 	bl	8000738 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800094c:	2300      	movs	r3, #0
}
 800094e:	4618      	mov	r0, r3
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	40023c00 	.word	0x40023c00

08000958 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000960:	4b12      	ldr	r3, [pc, #72]	@ (80009ac <HAL_InitTick+0x54>)
 8000962:	681a      	ldr	r2, [r3, #0]
 8000964:	4b12      	ldr	r3, [pc, #72]	@ (80009b0 <HAL_InitTick+0x58>)
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	4619      	mov	r1, r3
 800096a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800096e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000972:	fbb2 f3f3 	udiv	r3, r2, r3
 8000976:	4618      	mov	r0, r3
 8000978:	f000 ffcf 	bl	800191a <HAL_SYSTICK_Config>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000982:	2301      	movs	r3, #1
 8000984:	e00e      	b.n	80009a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	2b0f      	cmp	r3, #15
 800098a:	d80a      	bhi.n	80009a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800098c:	2200      	movs	r2, #0
 800098e:	6879      	ldr	r1, [r7, #4]
 8000990:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000994:	f000 ff97 	bl	80018c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000998:	4a06      	ldr	r2, [pc, #24]	@ (80009b4 <HAL_InitTick+0x5c>)
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800099e:	2300      	movs	r3, #0
 80009a0:	e000      	b.n	80009a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009a2:	2301      	movs	r3, #1
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	3708      	adds	r7, #8
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	20000000 	.word	0x20000000
 80009b0:	20000008 	.word	0x20000008
 80009b4:	20000004 	.word	0x20000004

080009b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009bc:	4b06      	ldr	r3, [pc, #24]	@ (80009d8 <HAL_IncTick+0x20>)
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	461a      	mov	r2, r3
 80009c2:	4b06      	ldr	r3, [pc, #24]	@ (80009dc <HAL_IncTick+0x24>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	4413      	add	r3, r2
 80009c8:	4a04      	ldr	r2, [pc, #16]	@ (80009dc <HAL_IncTick+0x24>)
 80009ca:	6013      	str	r3, [r2, #0]
}
 80009cc:	bf00      	nop
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop
 80009d8:	20000008 	.word	0x20000008
 80009dc:	20000074 	.word	0x20000074

080009e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  return uwTick;
 80009e4:	4b03      	ldr	r3, [pc, #12]	@ (80009f4 <HAL_GetTick+0x14>)
 80009e6:	681b      	ldr	r3, [r3, #0]
}
 80009e8:	4618      	mov	r0, r3
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop
 80009f4:	20000074 	.word	0x20000074

080009f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b084      	sub	sp, #16
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a00:	f7ff ffee 	bl	80009e0 <HAL_GetTick>
 8000a04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000a10:	d005      	beq.n	8000a1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a12:	4b0a      	ldr	r3, [pc, #40]	@ (8000a3c <HAL_Delay+0x44>)
 8000a14:	781b      	ldrb	r3, [r3, #0]
 8000a16:	461a      	mov	r2, r3
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	4413      	add	r3, r2
 8000a1c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000a1e:	bf00      	nop
 8000a20:	f7ff ffde 	bl	80009e0 <HAL_GetTick>
 8000a24:	4602      	mov	r2, r0
 8000a26:	68bb      	ldr	r3, [r7, #8]
 8000a28:	1ad3      	subs	r3, r2, r3
 8000a2a:	68fa      	ldr	r2, [r7, #12]
 8000a2c:	429a      	cmp	r2, r3
 8000a2e:	d8f7      	bhi.n	8000a20 <HAL_Delay+0x28>
  {
  }
}
 8000a30:	bf00      	nop
 8000a32:	bf00      	nop
 8000a34:	3710      	adds	r7, #16
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	20000008 	.word	0x20000008

08000a40 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b084      	sub	sp, #16
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d101      	bne.n	8000a52 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000a4e:	2301      	movs	r3, #1
 8000a50:	e0ed      	b.n	8000c2e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000a58:	b2db      	uxtb	r3, r3
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d102      	bne.n	8000a64 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000a5e:	6878      	ldr	r0, [r7, #4]
 8000a60:	f7ff fe92 	bl	8000788 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	681a      	ldr	r2, [r3, #0]
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	f042 0201 	orr.w	r2, r2, #1
 8000a72:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000a74:	f7ff ffb4 	bl	80009e0 <HAL_GetTick>
 8000a78:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000a7a:	e012      	b.n	8000aa2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000a7c:	f7ff ffb0 	bl	80009e0 <HAL_GetTick>
 8000a80:	4602      	mov	r2, r0
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	1ad3      	subs	r3, r2, r3
 8000a86:	2b0a      	cmp	r3, #10
 8000a88:	d90b      	bls.n	8000aa2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a8e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	2205      	movs	r2, #5
 8000a9a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	e0c5      	b.n	8000c2e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	685b      	ldr	r3, [r3, #4]
 8000aa8:	f003 0301 	and.w	r3, r3, #1
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d0e5      	beq.n	8000a7c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	681a      	ldr	r2, [r3, #0]
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	f022 0202 	bic.w	r2, r2, #2
 8000abe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000ac0:	f7ff ff8e 	bl	80009e0 <HAL_GetTick>
 8000ac4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000ac6:	e012      	b.n	8000aee <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000ac8:	f7ff ff8a 	bl	80009e0 <HAL_GetTick>
 8000acc:	4602      	mov	r2, r0
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	1ad3      	subs	r3, r2, r3
 8000ad2:	2b0a      	cmp	r3, #10
 8000ad4:	d90b      	bls.n	8000aee <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ada:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	2205      	movs	r2, #5
 8000ae6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000aea:	2301      	movs	r3, #1
 8000aec:	e09f      	b.n	8000c2e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	685b      	ldr	r3, [r3, #4]
 8000af4:	f003 0302 	and.w	r3, r3, #2
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d1e5      	bne.n	8000ac8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	7e1b      	ldrb	r3, [r3, #24]
 8000b00:	2b01      	cmp	r3, #1
 8000b02:	d108      	bne.n	8000b16 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	681a      	ldr	r2, [r3, #0]
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000b12:	601a      	str	r2, [r3, #0]
 8000b14:	e007      	b.n	8000b26 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	681a      	ldr	r2, [r3, #0]
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000b24:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	7e5b      	ldrb	r3, [r3, #25]
 8000b2a:	2b01      	cmp	r3, #1
 8000b2c:	d108      	bne.n	8000b40 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	681a      	ldr	r2, [r3, #0]
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000b3c:	601a      	str	r2, [r3, #0]
 8000b3e:	e007      	b.n	8000b50 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	681a      	ldr	r2, [r3, #0]
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000b4e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	7e9b      	ldrb	r3, [r3, #26]
 8000b54:	2b01      	cmp	r3, #1
 8000b56:	d108      	bne.n	8000b6a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	681a      	ldr	r2, [r3, #0]
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	f042 0220 	orr.w	r2, r2, #32
 8000b66:	601a      	str	r2, [r3, #0]
 8000b68:	e007      	b.n	8000b7a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	681a      	ldr	r2, [r3, #0]
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	f022 0220 	bic.w	r2, r2, #32
 8000b78:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	7edb      	ldrb	r3, [r3, #27]
 8000b7e:	2b01      	cmp	r3, #1
 8000b80:	d108      	bne.n	8000b94 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	681a      	ldr	r2, [r3, #0]
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	f022 0210 	bic.w	r2, r2, #16
 8000b90:	601a      	str	r2, [r3, #0]
 8000b92:	e007      	b.n	8000ba4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	681a      	ldr	r2, [r3, #0]
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	f042 0210 	orr.w	r2, r2, #16
 8000ba2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	7f1b      	ldrb	r3, [r3, #28]
 8000ba8:	2b01      	cmp	r3, #1
 8000baa:	d108      	bne.n	8000bbe <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	681a      	ldr	r2, [r3, #0]
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	f042 0208 	orr.w	r2, r2, #8
 8000bba:	601a      	str	r2, [r3, #0]
 8000bbc:	e007      	b.n	8000bce <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	681a      	ldr	r2, [r3, #0]
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	f022 0208 	bic.w	r2, r2, #8
 8000bcc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	7f5b      	ldrb	r3, [r3, #29]
 8000bd2:	2b01      	cmp	r3, #1
 8000bd4:	d108      	bne.n	8000be8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	681a      	ldr	r2, [r3, #0]
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	f042 0204 	orr.w	r2, r2, #4
 8000be4:	601a      	str	r2, [r3, #0]
 8000be6:	e007      	b.n	8000bf8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	681a      	ldr	r2, [r3, #0]
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	f022 0204 	bic.w	r2, r2, #4
 8000bf6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	689a      	ldr	r2, [r3, #8]
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	68db      	ldr	r3, [r3, #12]
 8000c00:	431a      	orrs	r2, r3
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	691b      	ldr	r3, [r3, #16]
 8000c06:	431a      	orrs	r2, r3
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	695b      	ldr	r3, [r3, #20]
 8000c0c:	ea42 0103 	orr.w	r1, r2, r3
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	685b      	ldr	r3, [r3, #4]
 8000c14:	1e5a      	subs	r2, r3, #1
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	430a      	orrs	r2, r1
 8000c1c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	2200      	movs	r2, #0
 8000c22:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	2201      	movs	r2, #1
 8000c28:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000c2c:	2300      	movs	r3, #0
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	3710      	adds	r7, #16
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
	...

08000c38 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b087      	sub	sp, #28
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
 8000c40:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c4e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000c50:	7cfb      	ldrb	r3, [r7, #19]
 8000c52:	2b01      	cmp	r3, #1
 8000c54:	d003      	beq.n	8000c5e <HAL_CAN_ConfigFilter+0x26>
 8000c56:	7cfb      	ldrb	r3, [r7, #19]
 8000c58:	2b02      	cmp	r3, #2
 8000c5a:	f040 80be 	bne.w	8000dda <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8000c5e:	4b65      	ldr	r3, [pc, #404]	@ (8000df4 <HAL_CAN_ConfigFilter+0x1bc>)
 8000c60:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000c62:	697b      	ldr	r3, [r7, #20]
 8000c64:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000c68:	f043 0201 	orr.w	r2, r3, #1
 8000c6c:	697b      	ldr	r3, [r7, #20]
 8000c6e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8000c72:	697b      	ldr	r3, [r7, #20]
 8000c74:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000c78:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8000c82:	697b      	ldr	r3, [r7, #20]
 8000c84:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c8c:	021b      	lsls	r3, r3, #8
 8000c8e:	431a      	orrs	r2, r3
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	695b      	ldr	r3, [r3, #20]
 8000c9a:	f003 031f 	and.w	r3, r3, #31
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca4:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000ca6:	697b      	ldr	r3, [r7, #20]
 8000ca8:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	43db      	mvns	r3, r3
 8000cb0:	401a      	ands	r2, r3
 8000cb2:	697b      	ldr	r3, [r7, #20]
 8000cb4:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	69db      	ldr	r3, [r3, #28]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d123      	bne.n	8000d08 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	43db      	mvns	r3, r3
 8000cca:	401a      	ands	r2, r3
 8000ccc:	697b      	ldr	r3, [r7, #20]
 8000cce:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	68db      	ldr	r3, [r3, #12]
 8000cd6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000cde:	683a      	ldr	r2, [r7, #0]
 8000ce0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000ce2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	3248      	adds	r2, #72	@ 0x48
 8000ce8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	689b      	ldr	r3, [r3, #8]
 8000cf0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000cfc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000cfe:	6979      	ldr	r1, [r7, #20]
 8000d00:	3348      	adds	r3, #72	@ 0x48
 8000d02:	00db      	lsls	r3, r3, #3
 8000d04:	440b      	add	r3, r1
 8000d06:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	69db      	ldr	r3, [r3, #28]
 8000d0c:	2b01      	cmp	r3, #1
 8000d0e:	d122      	bne.n	8000d56 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	431a      	orrs	r2, r3
 8000d1a:	697b      	ldr	r3, [r7, #20]
 8000d1c:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	685b      	ldr	r3, [r3, #4]
 8000d2a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000d2c:	683a      	ldr	r2, [r7, #0]
 8000d2e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000d30:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000d32:	697b      	ldr	r3, [r7, #20]
 8000d34:	3248      	adds	r2, #72	@ 0x48
 8000d36:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	689b      	ldr	r3, [r3, #8]
 8000d3e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	68db      	ldr	r3, [r3, #12]
 8000d44:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000d4a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000d4c:	6979      	ldr	r1, [r7, #20]
 8000d4e:	3348      	adds	r3, #72	@ 0x48
 8000d50:	00db      	lsls	r3, r3, #3
 8000d52:	440b      	add	r3, r1
 8000d54:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	699b      	ldr	r3, [r3, #24]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d109      	bne.n	8000d72 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000d5e:	697b      	ldr	r3, [r7, #20]
 8000d60:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	43db      	mvns	r3, r3
 8000d68:	401a      	ands	r2, r3
 8000d6a:	697b      	ldr	r3, [r7, #20]
 8000d6c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8000d70:	e007      	b.n	8000d82 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000d72:	697b      	ldr	r3, [r7, #20]
 8000d74:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	431a      	orrs	r2, r3
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	691b      	ldr	r3, [r3, #16]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d109      	bne.n	8000d9e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000d8a:	697b      	ldr	r3, [r7, #20]
 8000d8c:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	43db      	mvns	r3, r3
 8000d94:	401a      	ands	r2, r3
 8000d96:	697b      	ldr	r3, [r7, #20]
 8000d98:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8000d9c:	e007      	b.n	8000dae <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000d9e:	697b      	ldr	r3, [r7, #20]
 8000da0:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	431a      	orrs	r2, r3
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	6a1b      	ldr	r3, [r3, #32]
 8000db2:	2b01      	cmp	r3, #1
 8000db4:	d107      	bne.n	8000dc6 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000db6:	697b      	ldr	r3, [r7, #20]
 8000db8:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	431a      	orrs	r2, r3
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000dc6:	697b      	ldr	r3, [r7, #20]
 8000dc8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000dcc:	f023 0201 	bic.w	r2, r3, #1
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	e006      	b.n	8000de8 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000dde:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000de6:	2301      	movs	r3, #1
  }
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	371c      	adds	r7, #28
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr
 8000df4:	40006400 	.word	0x40006400

08000df8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b084      	sub	sp, #16
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e06:	b2db      	uxtb	r3, r3
 8000e08:	2b01      	cmp	r3, #1
 8000e0a:	d12e      	bne.n	8000e6a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	2202      	movs	r2, #2
 8000e10:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	f022 0201 	bic.w	r2, r2, #1
 8000e22:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000e24:	f7ff fddc 	bl	80009e0 <HAL_GetTick>
 8000e28:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000e2a:	e012      	b.n	8000e52 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000e2c:	f7ff fdd8 	bl	80009e0 <HAL_GetTick>
 8000e30:	4602      	mov	r2, r0
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	1ad3      	subs	r3, r2, r3
 8000e36:	2b0a      	cmp	r3, #10
 8000e38:	d90b      	bls.n	8000e52 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e3e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	2205      	movs	r2, #5
 8000e4a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	e012      	b.n	8000e78 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	f003 0301 	and.w	r3, r3, #1
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d1e5      	bne.n	8000e2c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	2200      	movs	r2, #0
 8000e64:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8000e66:	2300      	movs	r3, #0
 8000e68:	e006      	b.n	8000e78 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e6e:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000e76:	2301      	movs	r3, #1
  }
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	3710      	adds	r7, #16
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}

08000e80 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b089      	sub	sp, #36	@ 0x24
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	60f8      	str	r0, [r7, #12]
 8000e88:	60b9      	str	r1, [r7, #8]
 8000e8a:	607a      	str	r2, [r7, #4]
 8000e8c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e94:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	689b      	ldr	r3, [r3, #8]
 8000e9c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000e9e:	7ffb      	ldrb	r3, [r7, #31]
 8000ea0:	2b01      	cmp	r3, #1
 8000ea2:	d003      	beq.n	8000eac <HAL_CAN_AddTxMessage+0x2c>
 8000ea4:	7ffb      	ldrb	r3, [r7, #31]
 8000ea6:	2b02      	cmp	r3, #2
 8000ea8:	f040 80ad 	bne.w	8001006 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000eac:	69bb      	ldr	r3, [r7, #24]
 8000eae:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d10a      	bne.n	8000ecc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000eb6:	69bb      	ldr	r3, [r7, #24]
 8000eb8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d105      	bne.n	8000ecc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000ec0:	69bb      	ldr	r3, [r7, #24]
 8000ec2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	f000 8095 	beq.w	8000ff6 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000ecc:	69bb      	ldr	r3, [r7, #24]
 8000ece:	0e1b      	lsrs	r3, r3, #24
 8000ed0:	f003 0303 	and.w	r3, r3, #3
 8000ed4:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	409a      	lsls	r2, r3
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000ee0:	68bb      	ldr	r3, [r7, #8]
 8000ee2:	689b      	ldr	r3, [r3, #8]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d10d      	bne.n	8000f04 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000ee8:	68bb      	ldr	r3, [r7, #8]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000eee:	68bb      	ldr	r3, [r7, #8]
 8000ef0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000ef2:	68f9      	ldr	r1, [r7, #12]
 8000ef4:	6809      	ldr	r1, [r1, #0]
 8000ef6:	431a      	orrs	r2, r3
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	3318      	adds	r3, #24
 8000efc:	011b      	lsls	r3, r3, #4
 8000efe:	440b      	add	r3, r1
 8000f00:	601a      	str	r2, [r3, #0]
 8000f02:	e00f      	b.n	8000f24 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000f04:	68bb      	ldr	r3, [r7, #8]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000f0a:	68bb      	ldr	r3, [r7, #8]
 8000f0c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000f0e:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000f10:	68bb      	ldr	r3, [r7, #8]
 8000f12:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000f14:	68f9      	ldr	r1, [r7, #12]
 8000f16:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000f18:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	3318      	adds	r3, #24
 8000f1e:	011b      	lsls	r3, r3, #4
 8000f20:	440b      	add	r3, r1
 8000f22:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	6819      	ldr	r1, [r3, #0]
 8000f28:	68bb      	ldr	r3, [r7, #8]
 8000f2a:	691a      	ldr	r2, [r3, #16]
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	3318      	adds	r3, #24
 8000f30:	011b      	lsls	r3, r3, #4
 8000f32:	440b      	add	r3, r1
 8000f34:	3304      	adds	r3, #4
 8000f36:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000f38:	68bb      	ldr	r3, [r7, #8]
 8000f3a:	7d1b      	ldrb	r3, [r3, #20]
 8000f3c:	2b01      	cmp	r3, #1
 8000f3e:	d111      	bne.n	8000f64 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	681a      	ldr	r2, [r3, #0]
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	3318      	adds	r3, #24
 8000f48:	011b      	lsls	r3, r3, #4
 8000f4a:	4413      	add	r3, r2
 8000f4c:	3304      	adds	r3, #4
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	68fa      	ldr	r2, [r7, #12]
 8000f52:	6811      	ldr	r1, [r2, #0]
 8000f54:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	3318      	adds	r3, #24
 8000f5c:	011b      	lsls	r3, r3, #4
 8000f5e:	440b      	add	r3, r1
 8000f60:	3304      	adds	r3, #4
 8000f62:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	3307      	adds	r3, #7
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	061a      	lsls	r2, r3, #24
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	3306      	adds	r3, #6
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	041b      	lsls	r3, r3, #16
 8000f74:	431a      	orrs	r2, r3
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	3305      	adds	r3, #5
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	021b      	lsls	r3, r3, #8
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	687a      	ldr	r2, [r7, #4]
 8000f82:	3204      	adds	r2, #4
 8000f84:	7812      	ldrb	r2, [r2, #0]
 8000f86:	4610      	mov	r0, r2
 8000f88:	68fa      	ldr	r2, [r7, #12]
 8000f8a:	6811      	ldr	r1, [r2, #0]
 8000f8c:	ea43 0200 	orr.w	r2, r3, r0
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	011b      	lsls	r3, r3, #4
 8000f94:	440b      	add	r3, r1
 8000f96:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8000f9a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	3303      	adds	r3, #3
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	061a      	lsls	r2, r3, #24
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	3302      	adds	r3, #2
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	041b      	lsls	r3, r3, #16
 8000fac:	431a      	orrs	r2, r3
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	021b      	lsls	r3, r3, #8
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	687a      	ldr	r2, [r7, #4]
 8000fba:	7812      	ldrb	r2, [r2, #0]
 8000fbc:	4610      	mov	r0, r2
 8000fbe:	68fa      	ldr	r2, [r7, #12]
 8000fc0:	6811      	ldr	r1, [r2, #0]
 8000fc2:	ea43 0200 	orr.w	r2, r3, r0
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	011b      	lsls	r3, r3, #4
 8000fca:	440b      	add	r3, r1
 8000fcc:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8000fd0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	681a      	ldr	r2, [r3, #0]
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	3318      	adds	r3, #24
 8000fda:	011b      	lsls	r3, r3, #4
 8000fdc:	4413      	add	r3, r2
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	68fa      	ldr	r2, [r7, #12]
 8000fe2:	6811      	ldr	r1, [r2, #0]
 8000fe4:	f043 0201 	orr.w	r2, r3, #1
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	3318      	adds	r3, #24
 8000fec:	011b      	lsls	r3, r3, #4
 8000fee:	440b      	add	r3, r1
 8000ff0:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	e00e      	b.n	8001014 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ffa:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8001002:	2301      	movs	r3, #1
 8001004:	e006      	b.n	8001014 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800100a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001012:	2301      	movs	r3, #1
  }
}
 8001014:	4618      	mov	r0, r3
 8001016:	3724      	adds	r7, #36	@ 0x24
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr

08001020 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001020:	b480      	push	{r7}
 8001022:	b087      	sub	sp, #28
 8001024:	af00      	add	r7, sp, #0
 8001026:	60f8      	str	r0, [r7, #12]
 8001028:	60b9      	str	r1, [r7, #8]
 800102a:	607a      	str	r2, [r7, #4]
 800102c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001034:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001036:	7dfb      	ldrb	r3, [r7, #23]
 8001038:	2b01      	cmp	r3, #1
 800103a:	d003      	beq.n	8001044 <HAL_CAN_GetRxMessage+0x24>
 800103c:	7dfb      	ldrb	r3, [r7, #23]
 800103e:	2b02      	cmp	r3, #2
 8001040:	f040 8103 	bne.w	800124a <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001044:	68bb      	ldr	r3, [r7, #8]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d10e      	bne.n	8001068 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	68db      	ldr	r3, [r3, #12]
 8001050:	f003 0303 	and.w	r3, r3, #3
 8001054:	2b00      	cmp	r3, #0
 8001056:	d116      	bne.n	8001086 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800105c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001064:	2301      	movs	r3, #1
 8001066:	e0f7      	b.n	8001258 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	691b      	ldr	r3, [r3, #16]
 800106e:	f003 0303 	and.w	r3, r3, #3
 8001072:	2b00      	cmp	r3, #0
 8001074:	d107      	bne.n	8001086 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800107a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001082:	2301      	movs	r3, #1
 8001084:	e0e8      	b.n	8001258 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	68bb      	ldr	r3, [r7, #8]
 800108c:	331b      	adds	r3, #27
 800108e:	011b      	lsls	r3, r3, #4
 8001090:	4413      	add	r3, r2
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f003 0204 	and.w	r2, r3, #4
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	689b      	ldr	r3, [r3, #8]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d10c      	bne.n	80010be <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	681a      	ldr	r2, [r3, #0]
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	331b      	adds	r3, #27
 80010ac:	011b      	lsls	r3, r3, #4
 80010ae:	4413      	add	r3, r2
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	0d5b      	lsrs	r3, r3, #21
 80010b4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	601a      	str	r2, [r3, #0]
 80010bc:	e00b      	b.n	80010d6 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	681a      	ldr	r2, [r3, #0]
 80010c2:	68bb      	ldr	r3, [r7, #8]
 80010c4:	331b      	adds	r3, #27
 80010c6:	011b      	lsls	r3, r3, #4
 80010c8:	4413      	add	r3, r2
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	08db      	lsrs	r3, r3, #3
 80010ce:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	681a      	ldr	r2, [r3, #0]
 80010da:	68bb      	ldr	r3, [r7, #8]
 80010dc:	331b      	adds	r3, #27
 80010de:	011b      	lsls	r3, r3, #4
 80010e0:	4413      	add	r3, r2
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f003 0202 	and.w	r2, r3, #2
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	331b      	adds	r3, #27
 80010f4:	011b      	lsls	r3, r3, #4
 80010f6:	4413      	add	r3, r2
 80010f8:	3304      	adds	r3, #4
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f003 0308 	and.w	r3, r3, #8
 8001100:	2b00      	cmp	r3, #0
 8001102:	d003      	beq.n	800110c <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2208      	movs	r2, #8
 8001108:	611a      	str	r2, [r3, #16]
 800110a:	e00b      	b.n	8001124 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	681a      	ldr	r2, [r3, #0]
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	331b      	adds	r3, #27
 8001114:	011b      	lsls	r3, r3, #4
 8001116:	4413      	add	r3, r2
 8001118:	3304      	adds	r3, #4
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f003 020f 	and.w	r2, r3, #15
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	681a      	ldr	r2, [r3, #0]
 8001128:	68bb      	ldr	r3, [r7, #8]
 800112a:	331b      	adds	r3, #27
 800112c:	011b      	lsls	r3, r3, #4
 800112e:	4413      	add	r3, r2
 8001130:	3304      	adds	r3, #4
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	0a1b      	lsrs	r3, r3, #8
 8001136:	b2da      	uxtb	r2, r3
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	681a      	ldr	r2, [r3, #0]
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	331b      	adds	r3, #27
 8001144:	011b      	lsls	r3, r3, #4
 8001146:	4413      	add	r3, r2
 8001148:	3304      	adds	r3, #4
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	0c1b      	lsrs	r3, r3, #16
 800114e:	b29a      	uxth	r2, r3
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	011b      	lsls	r3, r3, #4
 800115c:	4413      	add	r3, r2
 800115e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	b2da      	uxtb	r2, r3
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	681a      	ldr	r2, [r3, #0]
 800116e:	68bb      	ldr	r3, [r7, #8]
 8001170:	011b      	lsls	r3, r3, #4
 8001172:	4413      	add	r3, r2
 8001174:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	0a1a      	lsrs	r2, r3, #8
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	3301      	adds	r3, #1
 8001180:	b2d2      	uxtb	r2, r2
 8001182:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	681a      	ldr	r2, [r3, #0]
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	011b      	lsls	r3, r3, #4
 800118c:	4413      	add	r3, r2
 800118e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	0c1a      	lsrs	r2, r3, #16
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	3302      	adds	r3, #2
 800119a:	b2d2      	uxtb	r2, r2
 800119c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	681a      	ldr	r2, [r3, #0]
 80011a2:	68bb      	ldr	r3, [r7, #8]
 80011a4:	011b      	lsls	r3, r3, #4
 80011a6:	4413      	add	r3, r2
 80011a8:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	0e1a      	lsrs	r2, r3, #24
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	3303      	adds	r3, #3
 80011b4:	b2d2      	uxtb	r2, r2
 80011b6:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	011b      	lsls	r3, r3, #4
 80011c0:	4413      	add	r3, r2
 80011c2:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80011c6:	681a      	ldr	r2, [r3, #0]
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	3304      	adds	r3, #4
 80011cc:	b2d2      	uxtb	r2, r2
 80011ce:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	011b      	lsls	r3, r3, #4
 80011d8:	4413      	add	r3, r2
 80011da:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	0a1a      	lsrs	r2, r3, #8
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	3305      	adds	r3, #5
 80011e6:	b2d2      	uxtb	r2, r2
 80011e8:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	681a      	ldr	r2, [r3, #0]
 80011ee:	68bb      	ldr	r3, [r7, #8]
 80011f0:	011b      	lsls	r3, r3, #4
 80011f2:	4413      	add	r3, r2
 80011f4:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	0c1a      	lsrs	r2, r3, #16
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	3306      	adds	r3, #6
 8001200:	b2d2      	uxtb	r2, r2
 8001202:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	68bb      	ldr	r3, [r7, #8]
 800120a:	011b      	lsls	r3, r3, #4
 800120c:	4413      	add	r3, r2
 800120e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	0e1a      	lsrs	r2, r3, #24
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	3307      	adds	r3, #7
 800121a:	b2d2      	uxtb	r2, r2
 800121c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800121e:	68bb      	ldr	r3, [r7, #8]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d108      	bne.n	8001236 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	68da      	ldr	r2, [r3, #12]
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f042 0220 	orr.w	r2, r2, #32
 8001232:	60da      	str	r2, [r3, #12]
 8001234:	e007      	b.n	8001246 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	691a      	ldr	r2, [r3, #16]
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f042 0220 	orr.w	r2, r2, #32
 8001244:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001246:	2300      	movs	r3, #0
 8001248:	e006      	b.n	8001258 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800124e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001256:	2301      	movs	r3, #1
  }
}
 8001258:	4618      	mov	r0, r3
 800125a:	371c      	adds	r7, #28
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr

08001264 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001264:	b480      	push	{r7}
 8001266:	b085      	sub	sp, #20
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
 800126c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001274:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001276:	7bfb      	ldrb	r3, [r7, #15]
 8001278:	2b01      	cmp	r3, #1
 800127a:	d002      	beq.n	8001282 <HAL_CAN_ActivateNotification+0x1e>
 800127c:	7bfb      	ldrb	r3, [r7, #15]
 800127e:	2b02      	cmp	r3, #2
 8001280:	d109      	bne.n	8001296 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	6959      	ldr	r1, [r3, #20]
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	683a      	ldr	r2, [r7, #0]
 800128e:	430a      	orrs	r2, r1
 8001290:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001292:	2300      	movs	r3, #0
 8001294:	e006      	b.n	80012a4 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800129a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80012a2:	2301      	movs	r3, #1
  }
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	3714      	adds	r7, #20
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr

080012b0 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b08a      	sub	sp, #40	@ 0x28
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80012b8:	2300      	movs	r3, #0
 80012ba:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	695b      	ldr	r3, [r3, #20]
 80012c2:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	689b      	ldr	r3, [r3, #8]
 80012d2:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	68db      	ldr	r3, [r3, #12]
 80012da:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	691b      	ldr	r3, [r3, #16]
 80012e2:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	699b      	ldr	r3, [r3, #24]
 80012ea:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80012ec:	6a3b      	ldr	r3, [r7, #32]
 80012ee:	f003 0301 	and.w	r3, r3, #1
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d07c      	beq.n	80013f0 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80012f6:	69bb      	ldr	r3, [r7, #24]
 80012f8:	f003 0301 	and.w	r3, r3, #1
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d023      	beq.n	8001348 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	2201      	movs	r2, #1
 8001306:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001308:	69bb      	ldr	r3, [r7, #24]
 800130a:	f003 0302 	and.w	r3, r3, #2
 800130e:	2b00      	cmp	r3, #0
 8001310:	d003      	beq.n	800131a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001312:	6878      	ldr	r0, [r7, #4]
 8001314:	f000 f983 	bl	800161e <HAL_CAN_TxMailbox0CompleteCallback>
 8001318:	e016      	b.n	8001348 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800131a:	69bb      	ldr	r3, [r7, #24]
 800131c:	f003 0304 	and.w	r3, r3, #4
 8001320:	2b00      	cmp	r3, #0
 8001322:	d004      	beq.n	800132e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001326:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800132a:	627b      	str	r3, [r7, #36]	@ 0x24
 800132c:	e00c      	b.n	8001348 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800132e:	69bb      	ldr	r3, [r7, #24]
 8001330:	f003 0308 	and.w	r3, r3, #8
 8001334:	2b00      	cmp	r3, #0
 8001336:	d004      	beq.n	8001342 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800133a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800133e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001340:	e002      	b.n	8001348 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001342:	6878      	ldr	r0, [r7, #4]
 8001344:	f000 f989 	bl	800165a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001348:	69bb      	ldr	r3, [r7, #24]
 800134a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800134e:	2b00      	cmp	r3, #0
 8001350:	d024      	beq.n	800139c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800135a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800135c:	69bb      	ldr	r3, [r7, #24]
 800135e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001362:	2b00      	cmp	r3, #0
 8001364:	d003      	beq.n	800136e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001366:	6878      	ldr	r0, [r7, #4]
 8001368:	f000 f963 	bl	8001632 <HAL_CAN_TxMailbox1CompleteCallback>
 800136c:	e016      	b.n	800139c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800136e:	69bb      	ldr	r3, [r7, #24]
 8001370:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001374:	2b00      	cmp	r3, #0
 8001376:	d004      	beq.n	8001382 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800137a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800137e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001380:	e00c      	b.n	800139c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001382:	69bb      	ldr	r3, [r7, #24]
 8001384:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001388:	2b00      	cmp	r3, #0
 800138a:	d004      	beq.n	8001396 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800138c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800138e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001392:	627b      	str	r3, [r7, #36]	@ 0x24
 8001394:	e002      	b.n	800139c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001396:	6878      	ldr	r0, [r7, #4]
 8001398:	f000 f969 	bl	800166e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800139c:	69bb      	ldr	r3, [r7, #24]
 800139e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d024      	beq.n	80013f0 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80013ae:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80013b0:	69bb      	ldr	r3, [r7, #24]
 80013b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d003      	beq.n	80013c2 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80013ba:	6878      	ldr	r0, [r7, #4]
 80013bc:	f000 f943 	bl	8001646 <HAL_CAN_TxMailbox2CompleteCallback>
 80013c0:	e016      	b.n	80013f0 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80013c2:	69bb      	ldr	r3, [r7, #24]
 80013c4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d004      	beq.n	80013d6 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80013cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80013d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80013d4:	e00c      	b.n	80013f0 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80013d6:	69bb      	ldr	r3, [r7, #24]
 80013d8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d004      	beq.n	80013ea <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80013e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80013e8:	e002      	b.n	80013f0 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80013ea:	6878      	ldr	r0, [r7, #4]
 80013ec:	f000 f949 	bl	8001682 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80013f0:	6a3b      	ldr	r3, [r7, #32]
 80013f2:	f003 0308 	and.w	r3, r3, #8
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d00c      	beq.n	8001414 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	f003 0310 	and.w	r3, r3, #16
 8001400:	2b00      	cmp	r3, #0
 8001402:	d007      	beq.n	8001414 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001406:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800140a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	2210      	movs	r2, #16
 8001412:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001414:	6a3b      	ldr	r3, [r7, #32]
 8001416:	f003 0304 	and.w	r3, r3, #4
 800141a:	2b00      	cmp	r3, #0
 800141c:	d00b      	beq.n	8001436 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	f003 0308 	and.w	r3, r3, #8
 8001424:	2b00      	cmp	r3, #0
 8001426:	d006      	beq.n	8001436 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	2208      	movs	r2, #8
 800142e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001430:	6878      	ldr	r0, [r7, #4]
 8001432:	f000 f930 	bl	8001696 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001436:	6a3b      	ldr	r3, [r7, #32]
 8001438:	f003 0302 	and.w	r3, r3, #2
 800143c:	2b00      	cmp	r3, #0
 800143e:	d009      	beq.n	8001454 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	68db      	ldr	r3, [r3, #12]
 8001446:	f003 0303 	and.w	r3, r3, #3
 800144a:	2b00      	cmp	r3, #0
 800144c:	d002      	beq.n	8001454 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800144e:	6878      	ldr	r0, [r7, #4]
 8001450:	f7ff f832 	bl	80004b8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001454:	6a3b      	ldr	r3, [r7, #32]
 8001456:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800145a:	2b00      	cmp	r3, #0
 800145c:	d00c      	beq.n	8001478 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	f003 0310 	and.w	r3, r3, #16
 8001464:	2b00      	cmp	r3, #0
 8001466:	d007      	beq.n	8001478 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001468:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800146a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800146e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	2210      	movs	r2, #16
 8001476:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001478:	6a3b      	ldr	r3, [r7, #32]
 800147a:	f003 0320 	and.w	r3, r3, #32
 800147e:	2b00      	cmp	r3, #0
 8001480:	d00b      	beq.n	800149a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	f003 0308 	and.w	r3, r3, #8
 8001488:	2b00      	cmp	r3, #0
 800148a:	d006      	beq.n	800149a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	2208      	movs	r2, #8
 8001492:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001494:	6878      	ldr	r0, [r7, #4]
 8001496:	f000 f912 	bl	80016be <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800149a:	6a3b      	ldr	r3, [r7, #32]
 800149c:	f003 0310 	and.w	r3, r3, #16
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d009      	beq.n	80014b8 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	691b      	ldr	r3, [r3, #16]
 80014aa:	f003 0303 	and.w	r3, r3, #3
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d002      	beq.n	80014b8 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80014b2:	6878      	ldr	r0, [r7, #4]
 80014b4:	f000 f8f9 	bl	80016aa <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80014b8:	6a3b      	ldr	r3, [r7, #32]
 80014ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d00b      	beq.n	80014da <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80014c2:	69fb      	ldr	r3, [r7, #28]
 80014c4:	f003 0310 	and.w	r3, r3, #16
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d006      	beq.n	80014da <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	2210      	movs	r2, #16
 80014d2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80014d4:	6878      	ldr	r0, [r7, #4]
 80014d6:	f000 f8fc 	bl	80016d2 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80014da:	6a3b      	ldr	r3, [r7, #32]
 80014dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d00b      	beq.n	80014fc <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80014e4:	69fb      	ldr	r3, [r7, #28]
 80014e6:	f003 0308 	and.w	r3, r3, #8
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d006      	beq.n	80014fc <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	2208      	movs	r2, #8
 80014f4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80014f6:	6878      	ldr	r0, [r7, #4]
 80014f8:	f000 f8f5 	bl	80016e6 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80014fc:	6a3b      	ldr	r3, [r7, #32]
 80014fe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001502:	2b00      	cmp	r3, #0
 8001504:	d07b      	beq.n	80015fe <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	f003 0304 	and.w	r3, r3, #4
 800150c:	2b00      	cmp	r3, #0
 800150e:	d072      	beq.n	80015f6 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001510:	6a3b      	ldr	r3, [r7, #32]
 8001512:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001516:	2b00      	cmp	r3, #0
 8001518:	d008      	beq.n	800152c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001520:	2b00      	cmp	r3, #0
 8001522:	d003      	beq.n	800152c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001526:	f043 0301 	orr.w	r3, r3, #1
 800152a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800152c:	6a3b      	ldr	r3, [r7, #32]
 800152e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001532:	2b00      	cmp	r3, #0
 8001534:	d008      	beq.n	8001548 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800153c:	2b00      	cmp	r3, #0
 800153e:	d003      	beq.n	8001548 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001542:	f043 0302 	orr.w	r3, r3, #2
 8001546:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001548:	6a3b      	ldr	r3, [r7, #32]
 800154a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800154e:	2b00      	cmp	r3, #0
 8001550:	d008      	beq.n	8001564 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001558:	2b00      	cmp	r3, #0
 800155a:	d003      	beq.n	8001564 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800155c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800155e:	f043 0304 	orr.w	r3, r3, #4
 8001562:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001564:	6a3b      	ldr	r3, [r7, #32]
 8001566:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800156a:	2b00      	cmp	r3, #0
 800156c:	d043      	beq.n	80015f6 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001574:	2b00      	cmp	r3, #0
 8001576:	d03e      	beq.n	80015f6 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800157e:	2b60      	cmp	r3, #96	@ 0x60
 8001580:	d02b      	beq.n	80015da <HAL_CAN_IRQHandler+0x32a>
 8001582:	2b60      	cmp	r3, #96	@ 0x60
 8001584:	d82e      	bhi.n	80015e4 <HAL_CAN_IRQHandler+0x334>
 8001586:	2b50      	cmp	r3, #80	@ 0x50
 8001588:	d022      	beq.n	80015d0 <HAL_CAN_IRQHandler+0x320>
 800158a:	2b50      	cmp	r3, #80	@ 0x50
 800158c:	d82a      	bhi.n	80015e4 <HAL_CAN_IRQHandler+0x334>
 800158e:	2b40      	cmp	r3, #64	@ 0x40
 8001590:	d019      	beq.n	80015c6 <HAL_CAN_IRQHandler+0x316>
 8001592:	2b40      	cmp	r3, #64	@ 0x40
 8001594:	d826      	bhi.n	80015e4 <HAL_CAN_IRQHandler+0x334>
 8001596:	2b30      	cmp	r3, #48	@ 0x30
 8001598:	d010      	beq.n	80015bc <HAL_CAN_IRQHandler+0x30c>
 800159a:	2b30      	cmp	r3, #48	@ 0x30
 800159c:	d822      	bhi.n	80015e4 <HAL_CAN_IRQHandler+0x334>
 800159e:	2b10      	cmp	r3, #16
 80015a0:	d002      	beq.n	80015a8 <HAL_CAN_IRQHandler+0x2f8>
 80015a2:	2b20      	cmp	r3, #32
 80015a4:	d005      	beq.n	80015b2 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80015a6:	e01d      	b.n	80015e4 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80015a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015aa:	f043 0308 	orr.w	r3, r3, #8
 80015ae:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80015b0:	e019      	b.n	80015e6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80015b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015b4:	f043 0310 	orr.w	r3, r3, #16
 80015b8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80015ba:	e014      	b.n	80015e6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80015bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015be:	f043 0320 	orr.w	r3, r3, #32
 80015c2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80015c4:	e00f      	b.n	80015e6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80015c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80015cc:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80015ce:	e00a      	b.n	80015e6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80015d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80015d6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80015d8:	e005      	b.n	80015e6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80015da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015e0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80015e2:	e000      	b.n	80015e6 <HAL_CAN_IRQHandler+0x336>
            break;
 80015e4:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	699a      	ldr	r2, [r3, #24]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80015f4:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	2204      	movs	r2, #4
 80015fc:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80015fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001600:	2b00      	cmp	r3, #0
 8001602:	d008      	beq.n	8001616 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800160a:	431a      	orrs	r2, r3
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001610:	6878      	ldr	r0, [r7, #4]
 8001612:	f000 f872 	bl	80016fa <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001616:	bf00      	nop
 8001618:	3728      	adds	r7, #40	@ 0x28
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}

0800161e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800161e:	b480      	push	{r7}
 8001620:	b083      	sub	sp, #12
 8001622:	af00      	add	r7, sp, #0
 8001624:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001626:	bf00      	nop
 8001628:	370c      	adds	r7, #12
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr

08001632 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001632:	b480      	push	{r7}
 8001634:	b083      	sub	sp, #12
 8001636:	af00      	add	r7, sp, #0
 8001638:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800163a:	bf00      	nop
 800163c:	370c      	adds	r7, #12
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr

08001646 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001646:	b480      	push	{r7}
 8001648:	b083      	sub	sp, #12
 800164a:	af00      	add	r7, sp, #0
 800164c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800164e:	bf00      	nop
 8001650:	370c      	adds	r7, #12
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr

0800165a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800165a:	b480      	push	{r7}
 800165c:	b083      	sub	sp, #12
 800165e:	af00      	add	r7, sp, #0
 8001660:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001662:	bf00      	nop
 8001664:	370c      	adds	r7, #12
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr

0800166e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800166e:	b480      	push	{r7}
 8001670:	b083      	sub	sp, #12
 8001672:	af00      	add	r7, sp, #0
 8001674:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001676:	bf00      	nop
 8001678:	370c      	adds	r7, #12
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr

08001682 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001682:	b480      	push	{r7}
 8001684:	b083      	sub	sp, #12
 8001686:	af00      	add	r7, sp, #0
 8001688:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800168a:	bf00      	nop
 800168c:	370c      	adds	r7, #12
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr

08001696 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001696:	b480      	push	{r7}
 8001698:	b083      	sub	sp, #12
 800169a:	af00      	add	r7, sp, #0
 800169c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800169e:	bf00      	nop
 80016a0:	370c      	adds	r7, #12
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr

080016aa <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80016aa:	b480      	push	{r7}
 80016ac:	b083      	sub	sp, #12
 80016ae:	af00      	add	r7, sp, #0
 80016b0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80016b2:	bf00      	nop
 80016b4:	370c      	adds	r7, #12
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr

080016be <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80016be:	b480      	push	{r7}
 80016c0:	b083      	sub	sp, #12
 80016c2:	af00      	add	r7, sp, #0
 80016c4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80016c6:	bf00      	nop
 80016c8:	370c      	adds	r7, #12
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr

080016d2 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80016d2:	b480      	push	{r7}
 80016d4:	b083      	sub	sp, #12
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80016da:	bf00      	nop
 80016dc:	370c      	adds	r7, #12
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr

080016e6 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80016e6:	b480      	push	{r7}
 80016e8:	b083      	sub	sp, #12
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80016ee:	bf00      	nop
 80016f0:	370c      	adds	r7, #12
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr

080016fa <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80016fa:	b480      	push	{r7}
 80016fc:	b083      	sub	sp, #12
 80016fe:	af00      	add	r7, sp, #0
 8001700:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001702:	bf00      	nop
 8001704:	370c      	adds	r7, #12
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
	...

08001710 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001710:	b480      	push	{r7}
 8001712:	b085      	sub	sp, #20
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	f003 0307 	and.w	r3, r3, #7
 800171e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001720:	4b0c      	ldr	r3, [pc, #48]	@ (8001754 <__NVIC_SetPriorityGrouping+0x44>)
 8001722:	68db      	ldr	r3, [r3, #12]
 8001724:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001726:	68ba      	ldr	r2, [r7, #8]
 8001728:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800172c:	4013      	ands	r3, r2
 800172e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001738:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800173c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001740:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001742:	4a04      	ldr	r2, [pc, #16]	@ (8001754 <__NVIC_SetPriorityGrouping+0x44>)
 8001744:	68bb      	ldr	r3, [r7, #8]
 8001746:	60d3      	str	r3, [r2, #12]
}
 8001748:	bf00      	nop
 800174a:	3714      	adds	r7, #20
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr
 8001754:	e000ed00 	.word	0xe000ed00

08001758 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800175c:	4b04      	ldr	r3, [pc, #16]	@ (8001770 <__NVIC_GetPriorityGrouping+0x18>)
 800175e:	68db      	ldr	r3, [r3, #12]
 8001760:	0a1b      	lsrs	r3, r3, #8
 8001762:	f003 0307 	and.w	r3, r3, #7
}
 8001766:	4618      	mov	r0, r3
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr
 8001770:	e000ed00 	.word	0xe000ed00

08001774 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001774:	b480      	push	{r7}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
 800177a:	4603      	mov	r3, r0
 800177c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800177e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001782:	2b00      	cmp	r3, #0
 8001784:	db0b      	blt.n	800179e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001786:	79fb      	ldrb	r3, [r7, #7]
 8001788:	f003 021f 	and.w	r2, r3, #31
 800178c:	4907      	ldr	r1, [pc, #28]	@ (80017ac <__NVIC_EnableIRQ+0x38>)
 800178e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001792:	095b      	lsrs	r3, r3, #5
 8001794:	2001      	movs	r0, #1
 8001796:	fa00 f202 	lsl.w	r2, r0, r2
 800179a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800179e:	bf00      	nop
 80017a0:	370c      	adds	r7, #12
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	e000e100 	.word	0xe000e100

080017b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b083      	sub	sp, #12
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	4603      	mov	r3, r0
 80017b8:	6039      	str	r1, [r7, #0]
 80017ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	db0a      	blt.n	80017da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	b2da      	uxtb	r2, r3
 80017c8:	490c      	ldr	r1, [pc, #48]	@ (80017fc <__NVIC_SetPriority+0x4c>)
 80017ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ce:	0112      	lsls	r2, r2, #4
 80017d0:	b2d2      	uxtb	r2, r2
 80017d2:	440b      	add	r3, r1
 80017d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017d8:	e00a      	b.n	80017f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	b2da      	uxtb	r2, r3
 80017de:	4908      	ldr	r1, [pc, #32]	@ (8001800 <__NVIC_SetPriority+0x50>)
 80017e0:	79fb      	ldrb	r3, [r7, #7]
 80017e2:	f003 030f 	and.w	r3, r3, #15
 80017e6:	3b04      	subs	r3, #4
 80017e8:	0112      	lsls	r2, r2, #4
 80017ea:	b2d2      	uxtb	r2, r2
 80017ec:	440b      	add	r3, r1
 80017ee:	761a      	strb	r2, [r3, #24]
}
 80017f0:	bf00      	nop
 80017f2:	370c      	adds	r7, #12
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr
 80017fc:	e000e100 	.word	0xe000e100
 8001800:	e000ed00 	.word	0xe000ed00

08001804 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001804:	b480      	push	{r7}
 8001806:	b089      	sub	sp, #36	@ 0x24
 8001808:	af00      	add	r7, sp, #0
 800180a:	60f8      	str	r0, [r7, #12]
 800180c:	60b9      	str	r1, [r7, #8]
 800180e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	f003 0307 	and.w	r3, r3, #7
 8001816:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001818:	69fb      	ldr	r3, [r7, #28]
 800181a:	f1c3 0307 	rsb	r3, r3, #7
 800181e:	2b04      	cmp	r3, #4
 8001820:	bf28      	it	cs
 8001822:	2304      	movcs	r3, #4
 8001824:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	3304      	adds	r3, #4
 800182a:	2b06      	cmp	r3, #6
 800182c:	d902      	bls.n	8001834 <NVIC_EncodePriority+0x30>
 800182e:	69fb      	ldr	r3, [r7, #28]
 8001830:	3b03      	subs	r3, #3
 8001832:	e000      	b.n	8001836 <NVIC_EncodePriority+0x32>
 8001834:	2300      	movs	r3, #0
 8001836:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001838:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800183c:	69bb      	ldr	r3, [r7, #24]
 800183e:	fa02 f303 	lsl.w	r3, r2, r3
 8001842:	43da      	mvns	r2, r3
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	401a      	ands	r2, r3
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800184c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	fa01 f303 	lsl.w	r3, r1, r3
 8001856:	43d9      	mvns	r1, r3
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800185c:	4313      	orrs	r3, r2
         );
}
 800185e:	4618      	mov	r0, r3
 8001860:	3724      	adds	r7, #36	@ 0x24
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr
	...

0800186c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b082      	sub	sp, #8
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	3b01      	subs	r3, #1
 8001878:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800187c:	d301      	bcc.n	8001882 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800187e:	2301      	movs	r3, #1
 8001880:	e00f      	b.n	80018a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001882:	4a0a      	ldr	r2, [pc, #40]	@ (80018ac <SysTick_Config+0x40>)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	3b01      	subs	r3, #1
 8001888:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800188a:	210f      	movs	r1, #15
 800188c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001890:	f7ff ff8e 	bl	80017b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001894:	4b05      	ldr	r3, [pc, #20]	@ (80018ac <SysTick_Config+0x40>)
 8001896:	2200      	movs	r2, #0
 8001898:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800189a:	4b04      	ldr	r3, [pc, #16]	@ (80018ac <SysTick_Config+0x40>)
 800189c:	2207      	movs	r2, #7
 800189e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018a0:	2300      	movs	r3, #0
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	3708      	adds	r7, #8
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	e000e010 	.word	0xe000e010

080018b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018b8:	6878      	ldr	r0, [r7, #4]
 80018ba:	f7ff ff29 	bl	8001710 <__NVIC_SetPriorityGrouping>
}
 80018be:	bf00      	nop
 80018c0:	3708      	adds	r7, #8
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}

080018c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018c6:	b580      	push	{r7, lr}
 80018c8:	b086      	sub	sp, #24
 80018ca:	af00      	add	r7, sp, #0
 80018cc:	4603      	mov	r3, r0
 80018ce:	60b9      	str	r1, [r7, #8]
 80018d0:	607a      	str	r2, [r7, #4]
 80018d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018d4:	2300      	movs	r3, #0
 80018d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018d8:	f7ff ff3e 	bl	8001758 <__NVIC_GetPriorityGrouping>
 80018dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018de:	687a      	ldr	r2, [r7, #4]
 80018e0:	68b9      	ldr	r1, [r7, #8]
 80018e2:	6978      	ldr	r0, [r7, #20]
 80018e4:	f7ff ff8e 	bl	8001804 <NVIC_EncodePriority>
 80018e8:	4602      	mov	r2, r0
 80018ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018ee:	4611      	mov	r1, r2
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7ff ff5d 	bl	80017b0 <__NVIC_SetPriority>
}
 80018f6:	bf00      	nop
 80018f8:	3718      	adds	r7, #24
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}

080018fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018fe:	b580      	push	{r7, lr}
 8001900:	b082      	sub	sp, #8
 8001902:	af00      	add	r7, sp, #0
 8001904:	4603      	mov	r3, r0
 8001906:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001908:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800190c:	4618      	mov	r0, r3
 800190e:	f7ff ff31 	bl	8001774 <__NVIC_EnableIRQ>
}
 8001912:	bf00      	nop
 8001914:	3708      	adds	r7, #8
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}

0800191a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800191a:	b580      	push	{r7, lr}
 800191c:	b082      	sub	sp, #8
 800191e:	af00      	add	r7, sp, #0
 8001920:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001922:	6878      	ldr	r0, [r7, #4]
 8001924:	f7ff ffa2 	bl	800186c <SysTick_Config>
 8001928:	4603      	mov	r3, r0
}
 800192a:	4618      	mov	r0, r3
 800192c:	3708      	adds	r7, #8
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
	...

08001934 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001934:	b480      	push	{r7}
 8001936:	b089      	sub	sp, #36	@ 0x24
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
 800193c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800193e:	2300      	movs	r3, #0
 8001940:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001942:	2300      	movs	r3, #0
 8001944:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001946:	2300      	movs	r3, #0
 8001948:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800194a:	2300      	movs	r3, #0
 800194c:	61fb      	str	r3, [r7, #28]
 800194e:	e16b      	b.n	8001c28 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001950:	2201      	movs	r2, #1
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	fa02 f303 	lsl.w	r3, r2, r3
 8001958:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	697a      	ldr	r2, [r7, #20]
 8001960:	4013      	ands	r3, r2
 8001962:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001964:	693a      	ldr	r2, [r7, #16]
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	429a      	cmp	r2, r3
 800196a:	f040 815a 	bne.w	8001c22 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	f003 0303 	and.w	r3, r3, #3
 8001976:	2b01      	cmp	r3, #1
 8001978:	d005      	beq.n	8001986 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001982:	2b02      	cmp	r3, #2
 8001984:	d130      	bne.n	80019e8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800198c:	69fb      	ldr	r3, [r7, #28]
 800198e:	005b      	lsls	r3, r3, #1
 8001990:	2203      	movs	r2, #3
 8001992:	fa02 f303 	lsl.w	r3, r2, r3
 8001996:	43db      	mvns	r3, r3
 8001998:	69ba      	ldr	r2, [r7, #24]
 800199a:	4013      	ands	r3, r2
 800199c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	68da      	ldr	r2, [r3, #12]
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	005b      	lsls	r3, r3, #1
 80019a6:	fa02 f303 	lsl.w	r3, r2, r3
 80019aa:	69ba      	ldr	r2, [r7, #24]
 80019ac:	4313      	orrs	r3, r2
 80019ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	69ba      	ldr	r2, [r7, #24]
 80019b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019bc:	2201      	movs	r2, #1
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	fa02 f303 	lsl.w	r3, r2, r3
 80019c4:	43db      	mvns	r3, r3
 80019c6:	69ba      	ldr	r2, [r7, #24]
 80019c8:	4013      	ands	r3, r2
 80019ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	091b      	lsrs	r3, r3, #4
 80019d2:	f003 0201 	and.w	r2, r3, #1
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	fa02 f303 	lsl.w	r3, r2, r3
 80019dc:	69ba      	ldr	r2, [r7, #24]
 80019de:	4313      	orrs	r3, r2
 80019e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	69ba      	ldr	r2, [r7, #24]
 80019e6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f003 0303 	and.w	r3, r3, #3
 80019f0:	2b03      	cmp	r3, #3
 80019f2:	d017      	beq.n	8001a24 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	68db      	ldr	r3, [r3, #12]
 80019f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	005b      	lsls	r3, r3, #1
 80019fe:	2203      	movs	r2, #3
 8001a00:	fa02 f303 	lsl.w	r3, r2, r3
 8001a04:	43db      	mvns	r3, r3
 8001a06:	69ba      	ldr	r2, [r7, #24]
 8001a08:	4013      	ands	r3, r2
 8001a0a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	689a      	ldr	r2, [r3, #8]
 8001a10:	69fb      	ldr	r3, [r7, #28]
 8001a12:	005b      	lsls	r3, r3, #1
 8001a14:	fa02 f303 	lsl.w	r3, r2, r3
 8001a18:	69ba      	ldr	r2, [r7, #24]
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	69ba      	ldr	r2, [r7, #24]
 8001a22:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f003 0303 	and.w	r3, r3, #3
 8001a2c:	2b02      	cmp	r3, #2
 8001a2e:	d123      	bne.n	8001a78 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a30:	69fb      	ldr	r3, [r7, #28]
 8001a32:	08da      	lsrs	r2, r3, #3
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	3208      	adds	r2, #8
 8001a38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	f003 0307 	and.w	r3, r3, #7
 8001a44:	009b      	lsls	r3, r3, #2
 8001a46:	220f      	movs	r2, #15
 8001a48:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4c:	43db      	mvns	r3, r3
 8001a4e:	69ba      	ldr	r2, [r7, #24]
 8001a50:	4013      	ands	r3, r2
 8001a52:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	691a      	ldr	r2, [r3, #16]
 8001a58:	69fb      	ldr	r3, [r7, #28]
 8001a5a:	f003 0307 	and.w	r3, r3, #7
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	fa02 f303 	lsl.w	r3, r2, r3
 8001a64:	69ba      	ldr	r2, [r7, #24]
 8001a66:	4313      	orrs	r3, r2
 8001a68:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	08da      	lsrs	r2, r3, #3
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	3208      	adds	r2, #8
 8001a72:	69b9      	ldr	r1, [r7, #24]
 8001a74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	005b      	lsls	r3, r3, #1
 8001a82:	2203      	movs	r2, #3
 8001a84:	fa02 f303 	lsl.w	r3, r2, r3
 8001a88:	43db      	mvns	r3, r3
 8001a8a:	69ba      	ldr	r2, [r7, #24]
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	f003 0203 	and.w	r2, r3, #3
 8001a98:	69fb      	ldr	r3, [r7, #28]
 8001a9a:	005b      	lsls	r3, r3, #1
 8001a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa0:	69ba      	ldr	r2, [r7, #24]
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	69ba      	ldr	r2, [r7, #24]
 8001aaa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	f000 80b4 	beq.w	8001c22 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aba:	2300      	movs	r3, #0
 8001abc:	60fb      	str	r3, [r7, #12]
 8001abe:	4b60      	ldr	r3, [pc, #384]	@ (8001c40 <HAL_GPIO_Init+0x30c>)
 8001ac0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ac2:	4a5f      	ldr	r2, [pc, #380]	@ (8001c40 <HAL_GPIO_Init+0x30c>)
 8001ac4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ac8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001aca:	4b5d      	ldr	r3, [pc, #372]	@ (8001c40 <HAL_GPIO_Init+0x30c>)
 8001acc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ace:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ad2:	60fb      	str	r3, [r7, #12]
 8001ad4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ad6:	4a5b      	ldr	r2, [pc, #364]	@ (8001c44 <HAL_GPIO_Init+0x310>)
 8001ad8:	69fb      	ldr	r3, [r7, #28]
 8001ada:	089b      	lsrs	r3, r3, #2
 8001adc:	3302      	adds	r3, #2
 8001ade:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ae2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ae4:	69fb      	ldr	r3, [r7, #28]
 8001ae6:	f003 0303 	and.w	r3, r3, #3
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	220f      	movs	r2, #15
 8001aee:	fa02 f303 	lsl.w	r3, r2, r3
 8001af2:	43db      	mvns	r3, r3
 8001af4:	69ba      	ldr	r2, [r7, #24]
 8001af6:	4013      	ands	r3, r2
 8001af8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	4a52      	ldr	r2, [pc, #328]	@ (8001c48 <HAL_GPIO_Init+0x314>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d02b      	beq.n	8001b5a <HAL_GPIO_Init+0x226>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	4a51      	ldr	r2, [pc, #324]	@ (8001c4c <HAL_GPIO_Init+0x318>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d025      	beq.n	8001b56 <HAL_GPIO_Init+0x222>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	4a50      	ldr	r2, [pc, #320]	@ (8001c50 <HAL_GPIO_Init+0x31c>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d01f      	beq.n	8001b52 <HAL_GPIO_Init+0x21e>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	4a4f      	ldr	r2, [pc, #316]	@ (8001c54 <HAL_GPIO_Init+0x320>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d019      	beq.n	8001b4e <HAL_GPIO_Init+0x21a>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	4a4e      	ldr	r2, [pc, #312]	@ (8001c58 <HAL_GPIO_Init+0x324>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d013      	beq.n	8001b4a <HAL_GPIO_Init+0x216>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	4a4d      	ldr	r2, [pc, #308]	@ (8001c5c <HAL_GPIO_Init+0x328>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d00d      	beq.n	8001b46 <HAL_GPIO_Init+0x212>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	4a4c      	ldr	r2, [pc, #304]	@ (8001c60 <HAL_GPIO_Init+0x32c>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d007      	beq.n	8001b42 <HAL_GPIO_Init+0x20e>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	4a4b      	ldr	r2, [pc, #300]	@ (8001c64 <HAL_GPIO_Init+0x330>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d101      	bne.n	8001b3e <HAL_GPIO_Init+0x20a>
 8001b3a:	2307      	movs	r3, #7
 8001b3c:	e00e      	b.n	8001b5c <HAL_GPIO_Init+0x228>
 8001b3e:	2308      	movs	r3, #8
 8001b40:	e00c      	b.n	8001b5c <HAL_GPIO_Init+0x228>
 8001b42:	2306      	movs	r3, #6
 8001b44:	e00a      	b.n	8001b5c <HAL_GPIO_Init+0x228>
 8001b46:	2305      	movs	r3, #5
 8001b48:	e008      	b.n	8001b5c <HAL_GPIO_Init+0x228>
 8001b4a:	2304      	movs	r3, #4
 8001b4c:	e006      	b.n	8001b5c <HAL_GPIO_Init+0x228>
 8001b4e:	2303      	movs	r3, #3
 8001b50:	e004      	b.n	8001b5c <HAL_GPIO_Init+0x228>
 8001b52:	2302      	movs	r3, #2
 8001b54:	e002      	b.n	8001b5c <HAL_GPIO_Init+0x228>
 8001b56:	2301      	movs	r3, #1
 8001b58:	e000      	b.n	8001b5c <HAL_GPIO_Init+0x228>
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	69fa      	ldr	r2, [r7, #28]
 8001b5e:	f002 0203 	and.w	r2, r2, #3
 8001b62:	0092      	lsls	r2, r2, #2
 8001b64:	4093      	lsls	r3, r2
 8001b66:	69ba      	ldr	r2, [r7, #24]
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b6c:	4935      	ldr	r1, [pc, #212]	@ (8001c44 <HAL_GPIO_Init+0x310>)
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	089b      	lsrs	r3, r3, #2
 8001b72:	3302      	adds	r3, #2
 8001b74:	69ba      	ldr	r2, [r7, #24]
 8001b76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b7a:	4b3b      	ldr	r3, [pc, #236]	@ (8001c68 <HAL_GPIO_Init+0x334>)
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	43db      	mvns	r3, r3
 8001b84:	69ba      	ldr	r2, [r7, #24]
 8001b86:	4013      	ands	r3, r2
 8001b88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d003      	beq.n	8001b9e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001b96:	69ba      	ldr	r2, [r7, #24]
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b9e:	4a32      	ldr	r2, [pc, #200]	@ (8001c68 <HAL_GPIO_Init+0x334>)
 8001ba0:	69bb      	ldr	r3, [r7, #24]
 8001ba2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ba4:	4b30      	ldr	r3, [pc, #192]	@ (8001c68 <HAL_GPIO_Init+0x334>)
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	43db      	mvns	r3, r3
 8001bae:	69ba      	ldr	r2, [r7, #24]
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d003      	beq.n	8001bc8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001bc0:	69ba      	ldr	r2, [r7, #24]
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001bc8:	4a27      	ldr	r2, [pc, #156]	@ (8001c68 <HAL_GPIO_Init+0x334>)
 8001bca:	69bb      	ldr	r3, [r7, #24]
 8001bcc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001bce:	4b26      	ldr	r3, [pc, #152]	@ (8001c68 <HAL_GPIO_Init+0x334>)
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	43db      	mvns	r3, r3
 8001bd8:	69ba      	ldr	r2, [r7, #24]
 8001bda:	4013      	ands	r3, r2
 8001bdc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d003      	beq.n	8001bf2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001bea:	69ba      	ldr	r2, [r7, #24]
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001bf2:	4a1d      	ldr	r2, [pc, #116]	@ (8001c68 <HAL_GPIO_Init+0x334>)
 8001bf4:	69bb      	ldr	r3, [r7, #24]
 8001bf6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bf8:	4b1b      	ldr	r3, [pc, #108]	@ (8001c68 <HAL_GPIO_Init+0x334>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	43db      	mvns	r3, r3
 8001c02:	69ba      	ldr	r2, [r7, #24]
 8001c04:	4013      	ands	r3, r2
 8001c06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d003      	beq.n	8001c1c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001c14:	69ba      	ldr	r2, [r7, #24]
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c1c:	4a12      	ldr	r2, [pc, #72]	@ (8001c68 <HAL_GPIO_Init+0x334>)
 8001c1e:	69bb      	ldr	r3, [r7, #24]
 8001c20:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	3301      	adds	r3, #1
 8001c26:	61fb      	str	r3, [r7, #28]
 8001c28:	69fb      	ldr	r3, [r7, #28]
 8001c2a:	2b0f      	cmp	r3, #15
 8001c2c:	f67f ae90 	bls.w	8001950 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c30:	bf00      	nop
 8001c32:	bf00      	nop
 8001c34:	3724      	adds	r7, #36	@ 0x24
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	40023800 	.word	0x40023800
 8001c44:	40013800 	.word	0x40013800
 8001c48:	40020000 	.word	0x40020000
 8001c4c:	40020400 	.word	0x40020400
 8001c50:	40020800 	.word	0x40020800
 8001c54:	40020c00 	.word	0x40020c00
 8001c58:	40021000 	.word	0x40021000
 8001c5c:	40021400 	.word	0x40021400
 8001c60:	40021800 	.word	0x40021800
 8001c64:	40021c00 	.word	0x40021c00
 8001c68:	40013c00 	.word	0x40013c00

08001c6c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b086      	sub	sp, #24
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d101      	bne.n	8001c7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e267      	b.n	800214e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 0301 	and.w	r3, r3, #1
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d075      	beq.n	8001d76 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001c8a:	4b88      	ldr	r3, [pc, #544]	@ (8001eac <HAL_RCC_OscConfig+0x240>)
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	f003 030c 	and.w	r3, r3, #12
 8001c92:	2b04      	cmp	r3, #4
 8001c94:	d00c      	beq.n	8001cb0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c96:	4b85      	ldr	r3, [pc, #532]	@ (8001eac <HAL_RCC_OscConfig+0x240>)
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001c9e:	2b08      	cmp	r3, #8
 8001ca0:	d112      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ca2:	4b82      	ldr	r3, [pc, #520]	@ (8001eac <HAL_RCC_OscConfig+0x240>)
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001caa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001cae:	d10b      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cb0:	4b7e      	ldr	r3, [pc, #504]	@ (8001eac <HAL_RCC_OscConfig+0x240>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d05b      	beq.n	8001d74 <HAL_RCC_OscConfig+0x108>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d157      	bne.n	8001d74 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	e242      	b.n	800214e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001cd0:	d106      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x74>
 8001cd2:	4b76      	ldr	r3, [pc, #472]	@ (8001eac <HAL_RCC_OscConfig+0x240>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a75      	ldr	r2, [pc, #468]	@ (8001eac <HAL_RCC_OscConfig+0x240>)
 8001cd8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001cdc:	6013      	str	r3, [r2, #0]
 8001cde:	e01d      	b.n	8001d1c <HAL_RCC_OscConfig+0xb0>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001ce8:	d10c      	bne.n	8001d04 <HAL_RCC_OscConfig+0x98>
 8001cea:	4b70      	ldr	r3, [pc, #448]	@ (8001eac <HAL_RCC_OscConfig+0x240>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a6f      	ldr	r2, [pc, #444]	@ (8001eac <HAL_RCC_OscConfig+0x240>)
 8001cf0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001cf4:	6013      	str	r3, [r2, #0]
 8001cf6:	4b6d      	ldr	r3, [pc, #436]	@ (8001eac <HAL_RCC_OscConfig+0x240>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a6c      	ldr	r2, [pc, #432]	@ (8001eac <HAL_RCC_OscConfig+0x240>)
 8001cfc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d00:	6013      	str	r3, [r2, #0]
 8001d02:	e00b      	b.n	8001d1c <HAL_RCC_OscConfig+0xb0>
 8001d04:	4b69      	ldr	r3, [pc, #420]	@ (8001eac <HAL_RCC_OscConfig+0x240>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a68      	ldr	r2, [pc, #416]	@ (8001eac <HAL_RCC_OscConfig+0x240>)
 8001d0a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d0e:	6013      	str	r3, [r2, #0]
 8001d10:	4b66      	ldr	r3, [pc, #408]	@ (8001eac <HAL_RCC_OscConfig+0x240>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a65      	ldr	r2, [pc, #404]	@ (8001eac <HAL_RCC_OscConfig+0x240>)
 8001d16:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d013      	beq.n	8001d4c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d24:	f7fe fe5c 	bl	80009e0 <HAL_GetTick>
 8001d28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d2a:	e008      	b.n	8001d3e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d2c:	f7fe fe58 	bl	80009e0 <HAL_GetTick>
 8001d30:	4602      	mov	r2, r0
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	2b64      	cmp	r3, #100	@ 0x64
 8001d38:	d901      	bls.n	8001d3e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	e207      	b.n	800214e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d3e:	4b5b      	ldr	r3, [pc, #364]	@ (8001eac <HAL_RCC_OscConfig+0x240>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d0f0      	beq.n	8001d2c <HAL_RCC_OscConfig+0xc0>
 8001d4a:	e014      	b.n	8001d76 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d4c:	f7fe fe48 	bl	80009e0 <HAL_GetTick>
 8001d50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d52:	e008      	b.n	8001d66 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d54:	f7fe fe44 	bl	80009e0 <HAL_GetTick>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	1ad3      	subs	r3, r2, r3
 8001d5e:	2b64      	cmp	r3, #100	@ 0x64
 8001d60:	d901      	bls.n	8001d66 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d62:	2303      	movs	r3, #3
 8001d64:	e1f3      	b.n	800214e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d66:	4b51      	ldr	r3, [pc, #324]	@ (8001eac <HAL_RCC_OscConfig+0x240>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d1f0      	bne.n	8001d54 <HAL_RCC_OscConfig+0xe8>
 8001d72:	e000      	b.n	8001d76 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f003 0302 	and.w	r3, r3, #2
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d063      	beq.n	8001e4a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001d82:	4b4a      	ldr	r3, [pc, #296]	@ (8001eac <HAL_RCC_OscConfig+0x240>)
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	f003 030c 	and.w	r3, r3, #12
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d00b      	beq.n	8001da6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d8e:	4b47      	ldr	r3, [pc, #284]	@ (8001eac <HAL_RCC_OscConfig+0x240>)
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001d96:	2b08      	cmp	r3, #8
 8001d98:	d11c      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d9a:	4b44      	ldr	r3, [pc, #272]	@ (8001eac <HAL_RCC_OscConfig+0x240>)
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d116      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001da6:	4b41      	ldr	r3, [pc, #260]	@ (8001eac <HAL_RCC_OscConfig+0x240>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 0302 	and.w	r3, r3, #2
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d005      	beq.n	8001dbe <HAL_RCC_OscConfig+0x152>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	68db      	ldr	r3, [r3, #12]
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d001      	beq.n	8001dbe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e1c7      	b.n	800214e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dbe:	4b3b      	ldr	r3, [pc, #236]	@ (8001eac <HAL_RCC_OscConfig+0x240>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	691b      	ldr	r3, [r3, #16]
 8001dca:	00db      	lsls	r3, r3, #3
 8001dcc:	4937      	ldr	r1, [pc, #220]	@ (8001eac <HAL_RCC_OscConfig+0x240>)
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dd2:	e03a      	b.n	8001e4a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d020      	beq.n	8001e1e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ddc:	4b34      	ldr	r3, [pc, #208]	@ (8001eb0 <HAL_RCC_OscConfig+0x244>)
 8001dde:	2201      	movs	r2, #1
 8001de0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001de2:	f7fe fdfd 	bl	80009e0 <HAL_GetTick>
 8001de6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001de8:	e008      	b.n	8001dfc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dea:	f7fe fdf9 	bl	80009e0 <HAL_GetTick>
 8001dee:	4602      	mov	r2, r0
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	1ad3      	subs	r3, r2, r3
 8001df4:	2b02      	cmp	r3, #2
 8001df6:	d901      	bls.n	8001dfc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001df8:	2303      	movs	r3, #3
 8001dfa:	e1a8      	b.n	800214e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dfc:	4b2b      	ldr	r3, [pc, #172]	@ (8001eac <HAL_RCC_OscConfig+0x240>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f003 0302 	and.w	r3, r3, #2
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d0f0      	beq.n	8001dea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e08:	4b28      	ldr	r3, [pc, #160]	@ (8001eac <HAL_RCC_OscConfig+0x240>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	691b      	ldr	r3, [r3, #16]
 8001e14:	00db      	lsls	r3, r3, #3
 8001e16:	4925      	ldr	r1, [pc, #148]	@ (8001eac <HAL_RCC_OscConfig+0x240>)
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	600b      	str	r3, [r1, #0]
 8001e1c:	e015      	b.n	8001e4a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e1e:	4b24      	ldr	r3, [pc, #144]	@ (8001eb0 <HAL_RCC_OscConfig+0x244>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e24:	f7fe fddc 	bl	80009e0 <HAL_GetTick>
 8001e28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e2a:	e008      	b.n	8001e3e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e2c:	f7fe fdd8 	bl	80009e0 <HAL_GetTick>
 8001e30:	4602      	mov	r2, r0
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	2b02      	cmp	r3, #2
 8001e38:	d901      	bls.n	8001e3e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	e187      	b.n	800214e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e3e:	4b1b      	ldr	r3, [pc, #108]	@ (8001eac <HAL_RCC_OscConfig+0x240>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 0302 	and.w	r3, r3, #2
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d1f0      	bne.n	8001e2c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 0308 	and.w	r3, r3, #8
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d036      	beq.n	8001ec4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	695b      	ldr	r3, [r3, #20]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d016      	beq.n	8001e8c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e5e:	4b15      	ldr	r3, [pc, #84]	@ (8001eb4 <HAL_RCC_OscConfig+0x248>)
 8001e60:	2201      	movs	r2, #1
 8001e62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e64:	f7fe fdbc 	bl	80009e0 <HAL_GetTick>
 8001e68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e6a:	e008      	b.n	8001e7e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e6c:	f7fe fdb8 	bl	80009e0 <HAL_GetTick>
 8001e70:	4602      	mov	r2, r0
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	2b02      	cmp	r3, #2
 8001e78:	d901      	bls.n	8001e7e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	e167      	b.n	800214e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e7e:	4b0b      	ldr	r3, [pc, #44]	@ (8001eac <HAL_RCC_OscConfig+0x240>)
 8001e80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e82:	f003 0302 	and.w	r3, r3, #2
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d0f0      	beq.n	8001e6c <HAL_RCC_OscConfig+0x200>
 8001e8a:	e01b      	b.n	8001ec4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e8c:	4b09      	ldr	r3, [pc, #36]	@ (8001eb4 <HAL_RCC_OscConfig+0x248>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e92:	f7fe fda5 	bl	80009e0 <HAL_GetTick>
 8001e96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e98:	e00e      	b.n	8001eb8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e9a:	f7fe fda1 	bl	80009e0 <HAL_GetTick>
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	1ad3      	subs	r3, r2, r3
 8001ea4:	2b02      	cmp	r3, #2
 8001ea6:	d907      	bls.n	8001eb8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001ea8:	2303      	movs	r3, #3
 8001eaa:	e150      	b.n	800214e <HAL_RCC_OscConfig+0x4e2>
 8001eac:	40023800 	.word	0x40023800
 8001eb0:	42470000 	.word	0x42470000
 8001eb4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001eb8:	4b88      	ldr	r3, [pc, #544]	@ (80020dc <HAL_RCC_OscConfig+0x470>)
 8001eba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ebc:	f003 0302 	and.w	r3, r3, #2
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d1ea      	bne.n	8001e9a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f003 0304 	and.w	r3, r3, #4
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	f000 8097 	beq.w	8002000 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ed6:	4b81      	ldr	r3, [pc, #516]	@ (80020dc <HAL_RCC_OscConfig+0x470>)
 8001ed8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d10f      	bne.n	8001f02 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	60bb      	str	r3, [r7, #8]
 8001ee6:	4b7d      	ldr	r3, [pc, #500]	@ (80020dc <HAL_RCC_OscConfig+0x470>)
 8001ee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eea:	4a7c      	ldr	r2, [pc, #496]	@ (80020dc <HAL_RCC_OscConfig+0x470>)
 8001eec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ef0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ef2:	4b7a      	ldr	r3, [pc, #488]	@ (80020dc <HAL_RCC_OscConfig+0x470>)
 8001ef4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ef6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001efa:	60bb      	str	r3, [r7, #8]
 8001efc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001efe:	2301      	movs	r3, #1
 8001f00:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f02:	4b77      	ldr	r3, [pc, #476]	@ (80020e0 <HAL_RCC_OscConfig+0x474>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d118      	bne.n	8001f40 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f0e:	4b74      	ldr	r3, [pc, #464]	@ (80020e0 <HAL_RCC_OscConfig+0x474>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a73      	ldr	r2, [pc, #460]	@ (80020e0 <HAL_RCC_OscConfig+0x474>)
 8001f14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f1a:	f7fe fd61 	bl	80009e0 <HAL_GetTick>
 8001f1e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f20:	e008      	b.n	8001f34 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f22:	f7fe fd5d 	bl	80009e0 <HAL_GetTick>
 8001f26:	4602      	mov	r2, r0
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	1ad3      	subs	r3, r2, r3
 8001f2c:	2b02      	cmp	r3, #2
 8001f2e:	d901      	bls.n	8001f34 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001f30:	2303      	movs	r3, #3
 8001f32:	e10c      	b.n	800214e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f34:	4b6a      	ldr	r3, [pc, #424]	@ (80020e0 <HAL_RCC_OscConfig+0x474>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d0f0      	beq.n	8001f22 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d106      	bne.n	8001f56 <HAL_RCC_OscConfig+0x2ea>
 8001f48:	4b64      	ldr	r3, [pc, #400]	@ (80020dc <HAL_RCC_OscConfig+0x470>)
 8001f4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f4c:	4a63      	ldr	r2, [pc, #396]	@ (80020dc <HAL_RCC_OscConfig+0x470>)
 8001f4e:	f043 0301 	orr.w	r3, r3, #1
 8001f52:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f54:	e01c      	b.n	8001f90 <HAL_RCC_OscConfig+0x324>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	2b05      	cmp	r3, #5
 8001f5c:	d10c      	bne.n	8001f78 <HAL_RCC_OscConfig+0x30c>
 8001f5e:	4b5f      	ldr	r3, [pc, #380]	@ (80020dc <HAL_RCC_OscConfig+0x470>)
 8001f60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f62:	4a5e      	ldr	r2, [pc, #376]	@ (80020dc <HAL_RCC_OscConfig+0x470>)
 8001f64:	f043 0304 	orr.w	r3, r3, #4
 8001f68:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f6a:	4b5c      	ldr	r3, [pc, #368]	@ (80020dc <HAL_RCC_OscConfig+0x470>)
 8001f6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f6e:	4a5b      	ldr	r2, [pc, #364]	@ (80020dc <HAL_RCC_OscConfig+0x470>)
 8001f70:	f043 0301 	orr.w	r3, r3, #1
 8001f74:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f76:	e00b      	b.n	8001f90 <HAL_RCC_OscConfig+0x324>
 8001f78:	4b58      	ldr	r3, [pc, #352]	@ (80020dc <HAL_RCC_OscConfig+0x470>)
 8001f7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f7c:	4a57      	ldr	r2, [pc, #348]	@ (80020dc <HAL_RCC_OscConfig+0x470>)
 8001f7e:	f023 0301 	bic.w	r3, r3, #1
 8001f82:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f84:	4b55      	ldr	r3, [pc, #340]	@ (80020dc <HAL_RCC_OscConfig+0x470>)
 8001f86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f88:	4a54      	ldr	r2, [pc, #336]	@ (80020dc <HAL_RCC_OscConfig+0x470>)
 8001f8a:	f023 0304 	bic.w	r3, r3, #4
 8001f8e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d015      	beq.n	8001fc4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f98:	f7fe fd22 	bl	80009e0 <HAL_GetTick>
 8001f9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f9e:	e00a      	b.n	8001fb6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fa0:	f7fe fd1e 	bl	80009e0 <HAL_GetTick>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d901      	bls.n	8001fb6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	e0cb      	b.n	800214e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fb6:	4b49      	ldr	r3, [pc, #292]	@ (80020dc <HAL_RCC_OscConfig+0x470>)
 8001fb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fba:	f003 0302 	and.w	r3, r3, #2
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d0ee      	beq.n	8001fa0 <HAL_RCC_OscConfig+0x334>
 8001fc2:	e014      	b.n	8001fee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fc4:	f7fe fd0c 	bl	80009e0 <HAL_GetTick>
 8001fc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fca:	e00a      	b.n	8001fe2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fcc:	f7fe fd08 	bl	80009e0 <HAL_GetTick>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d901      	bls.n	8001fe2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	e0b5      	b.n	800214e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fe2:	4b3e      	ldr	r3, [pc, #248]	@ (80020dc <HAL_RCC_OscConfig+0x470>)
 8001fe4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fe6:	f003 0302 	and.w	r3, r3, #2
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d1ee      	bne.n	8001fcc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001fee:	7dfb      	ldrb	r3, [r7, #23]
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d105      	bne.n	8002000 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ff4:	4b39      	ldr	r3, [pc, #228]	@ (80020dc <HAL_RCC_OscConfig+0x470>)
 8001ff6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ff8:	4a38      	ldr	r2, [pc, #224]	@ (80020dc <HAL_RCC_OscConfig+0x470>)
 8001ffa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ffe:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	699b      	ldr	r3, [r3, #24]
 8002004:	2b00      	cmp	r3, #0
 8002006:	f000 80a1 	beq.w	800214c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800200a:	4b34      	ldr	r3, [pc, #208]	@ (80020dc <HAL_RCC_OscConfig+0x470>)
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	f003 030c 	and.w	r3, r3, #12
 8002012:	2b08      	cmp	r3, #8
 8002014:	d05c      	beq.n	80020d0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	699b      	ldr	r3, [r3, #24]
 800201a:	2b02      	cmp	r3, #2
 800201c:	d141      	bne.n	80020a2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800201e:	4b31      	ldr	r3, [pc, #196]	@ (80020e4 <HAL_RCC_OscConfig+0x478>)
 8002020:	2200      	movs	r2, #0
 8002022:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002024:	f7fe fcdc 	bl	80009e0 <HAL_GetTick>
 8002028:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800202a:	e008      	b.n	800203e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800202c:	f7fe fcd8 	bl	80009e0 <HAL_GetTick>
 8002030:	4602      	mov	r2, r0
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	1ad3      	subs	r3, r2, r3
 8002036:	2b02      	cmp	r3, #2
 8002038:	d901      	bls.n	800203e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800203a:	2303      	movs	r3, #3
 800203c:	e087      	b.n	800214e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800203e:	4b27      	ldr	r3, [pc, #156]	@ (80020dc <HAL_RCC_OscConfig+0x470>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002046:	2b00      	cmp	r3, #0
 8002048:	d1f0      	bne.n	800202c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	69da      	ldr	r2, [r3, #28]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6a1b      	ldr	r3, [r3, #32]
 8002052:	431a      	orrs	r2, r3
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002058:	019b      	lsls	r3, r3, #6
 800205a:	431a      	orrs	r2, r3
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002060:	085b      	lsrs	r3, r3, #1
 8002062:	3b01      	subs	r3, #1
 8002064:	041b      	lsls	r3, r3, #16
 8002066:	431a      	orrs	r2, r3
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800206c:	061b      	lsls	r3, r3, #24
 800206e:	491b      	ldr	r1, [pc, #108]	@ (80020dc <HAL_RCC_OscConfig+0x470>)
 8002070:	4313      	orrs	r3, r2
 8002072:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002074:	4b1b      	ldr	r3, [pc, #108]	@ (80020e4 <HAL_RCC_OscConfig+0x478>)
 8002076:	2201      	movs	r2, #1
 8002078:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800207a:	f7fe fcb1 	bl	80009e0 <HAL_GetTick>
 800207e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002080:	e008      	b.n	8002094 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002082:	f7fe fcad 	bl	80009e0 <HAL_GetTick>
 8002086:	4602      	mov	r2, r0
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	1ad3      	subs	r3, r2, r3
 800208c:	2b02      	cmp	r3, #2
 800208e:	d901      	bls.n	8002094 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002090:	2303      	movs	r3, #3
 8002092:	e05c      	b.n	800214e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002094:	4b11      	ldr	r3, [pc, #68]	@ (80020dc <HAL_RCC_OscConfig+0x470>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800209c:	2b00      	cmp	r3, #0
 800209e:	d0f0      	beq.n	8002082 <HAL_RCC_OscConfig+0x416>
 80020a0:	e054      	b.n	800214c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020a2:	4b10      	ldr	r3, [pc, #64]	@ (80020e4 <HAL_RCC_OscConfig+0x478>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020a8:	f7fe fc9a 	bl	80009e0 <HAL_GetTick>
 80020ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020ae:	e008      	b.n	80020c2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020b0:	f7fe fc96 	bl	80009e0 <HAL_GetTick>
 80020b4:	4602      	mov	r2, r0
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	1ad3      	subs	r3, r2, r3
 80020ba:	2b02      	cmp	r3, #2
 80020bc:	d901      	bls.n	80020c2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80020be:	2303      	movs	r3, #3
 80020c0:	e045      	b.n	800214e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020c2:	4b06      	ldr	r3, [pc, #24]	@ (80020dc <HAL_RCC_OscConfig+0x470>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d1f0      	bne.n	80020b0 <HAL_RCC_OscConfig+0x444>
 80020ce:	e03d      	b.n	800214c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	699b      	ldr	r3, [r3, #24]
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d107      	bne.n	80020e8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	e038      	b.n	800214e <HAL_RCC_OscConfig+0x4e2>
 80020dc:	40023800 	.word	0x40023800
 80020e0:	40007000 	.word	0x40007000
 80020e4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80020e8:	4b1b      	ldr	r3, [pc, #108]	@ (8002158 <HAL_RCC_OscConfig+0x4ec>)
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	699b      	ldr	r3, [r3, #24]
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d028      	beq.n	8002148 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002100:	429a      	cmp	r2, r3
 8002102:	d121      	bne.n	8002148 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800210e:	429a      	cmp	r2, r3
 8002110:	d11a      	bne.n	8002148 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002112:	68fa      	ldr	r2, [r7, #12]
 8002114:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002118:	4013      	ands	r3, r2
 800211a:	687a      	ldr	r2, [r7, #4]
 800211c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800211e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002120:	4293      	cmp	r3, r2
 8002122:	d111      	bne.n	8002148 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800212e:	085b      	lsrs	r3, r3, #1
 8002130:	3b01      	subs	r3, #1
 8002132:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002134:	429a      	cmp	r2, r3
 8002136:	d107      	bne.n	8002148 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002142:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002144:	429a      	cmp	r2, r3
 8002146:	d001      	beq.n	800214c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	e000      	b.n	800214e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800214c:	2300      	movs	r3, #0
}
 800214e:	4618      	mov	r0, r3
 8002150:	3718      	adds	r7, #24
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	40023800 	.word	0x40023800

0800215c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b084      	sub	sp, #16
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
 8002164:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d101      	bne.n	8002170 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	e0cc      	b.n	800230a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002170:	4b68      	ldr	r3, [pc, #416]	@ (8002314 <HAL_RCC_ClockConfig+0x1b8>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 0307 	and.w	r3, r3, #7
 8002178:	683a      	ldr	r2, [r7, #0]
 800217a:	429a      	cmp	r2, r3
 800217c:	d90c      	bls.n	8002198 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800217e:	4b65      	ldr	r3, [pc, #404]	@ (8002314 <HAL_RCC_ClockConfig+0x1b8>)
 8002180:	683a      	ldr	r2, [r7, #0]
 8002182:	b2d2      	uxtb	r2, r2
 8002184:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002186:	4b63      	ldr	r3, [pc, #396]	@ (8002314 <HAL_RCC_ClockConfig+0x1b8>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 0307 	and.w	r3, r3, #7
 800218e:	683a      	ldr	r2, [r7, #0]
 8002190:	429a      	cmp	r2, r3
 8002192:	d001      	beq.n	8002198 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002194:	2301      	movs	r3, #1
 8002196:	e0b8      	b.n	800230a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f003 0302 	and.w	r3, r3, #2
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d020      	beq.n	80021e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 0304 	and.w	r3, r3, #4
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d005      	beq.n	80021bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021b0:	4b59      	ldr	r3, [pc, #356]	@ (8002318 <HAL_RCC_ClockConfig+0x1bc>)
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	4a58      	ldr	r2, [pc, #352]	@ (8002318 <HAL_RCC_ClockConfig+0x1bc>)
 80021b6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80021ba:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 0308 	and.w	r3, r3, #8
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d005      	beq.n	80021d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021c8:	4b53      	ldr	r3, [pc, #332]	@ (8002318 <HAL_RCC_ClockConfig+0x1bc>)
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	4a52      	ldr	r2, [pc, #328]	@ (8002318 <HAL_RCC_ClockConfig+0x1bc>)
 80021ce:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80021d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021d4:	4b50      	ldr	r3, [pc, #320]	@ (8002318 <HAL_RCC_ClockConfig+0x1bc>)
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	494d      	ldr	r1, [pc, #308]	@ (8002318 <HAL_RCC_ClockConfig+0x1bc>)
 80021e2:	4313      	orrs	r3, r2
 80021e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 0301 	and.w	r3, r3, #1
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d044      	beq.n	800227c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d107      	bne.n	800220a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021fa:	4b47      	ldr	r3, [pc, #284]	@ (8002318 <HAL_RCC_ClockConfig+0x1bc>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d119      	bne.n	800223a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e07f      	b.n	800230a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	2b02      	cmp	r3, #2
 8002210:	d003      	beq.n	800221a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002216:	2b03      	cmp	r3, #3
 8002218:	d107      	bne.n	800222a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800221a:	4b3f      	ldr	r3, [pc, #252]	@ (8002318 <HAL_RCC_ClockConfig+0x1bc>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002222:	2b00      	cmp	r3, #0
 8002224:	d109      	bne.n	800223a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e06f      	b.n	800230a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800222a:	4b3b      	ldr	r3, [pc, #236]	@ (8002318 <HAL_RCC_ClockConfig+0x1bc>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 0302 	and.w	r3, r3, #2
 8002232:	2b00      	cmp	r3, #0
 8002234:	d101      	bne.n	800223a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e067      	b.n	800230a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800223a:	4b37      	ldr	r3, [pc, #220]	@ (8002318 <HAL_RCC_ClockConfig+0x1bc>)
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	f023 0203 	bic.w	r2, r3, #3
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	4934      	ldr	r1, [pc, #208]	@ (8002318 <HAL_RCC_ClockConfig+0x1bc>)
 8002248:	4313      	orrs	r3, r2
 800224a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800224c:	f7fe fbc8 	bl	80009e0 <HAL_GetTick>
 8002250:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002252:	e00a      	b.n	800226a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002254:	f7fe fbc4 	bl	80009e0 <HAL_GetTick>
 8002258:	4602      	mov	r2, r0
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002262:	4293      	cmp	r3, r2
 8002264:	d901      	bls.n	800226a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002266:	2303      	movs	r3, #3
 8002268:	e04f      	b.n	800230a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800226a:	4b2b      	ldr	r3, [pc, #172]	@ (8002318 <HAL_RCC_ClockConfig+0x1bc>)
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	f003 020c 	and.w	r2, r3, #12
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	429a      	cmp	r2, r3
 800227a:	d1eb      	bne.n	8002254 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800227c:	4b25      	ldr	r3, [pc, #148]	@ (8002314 <HAL_RCC_ClockConfig+0x1b8>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f003 0307 	and.w	r3, r3, #7
 8002284:	683a      	ldr	r2, [r7, #0]
 8002286:	429a      	cmp	r2, r3
 8002288:	d20c      	bcs.n	80022a4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800228a:	4b22      	ldr	r3, [pc, #136]	@ (8002314 <HAL_RCC_ClockConfig+0x1b8>)
 800228c:	683a      	ldr	r2, [r7, #0]
 800228e:	b2d2      	uxtb	r2, r2
 8002290:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002292:	4b20      	ldr	r3, [pc, #128]	@ (8002314 <HAL_RCC_ClockConfig+0x1b8>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 0307 	and.w	r3, r3, #7
 800229a:	683a      	ldr	r2, [r7, #0]
 800229c:	429a      	cmp	r2, r3
 800229e:	d001      	beq.n	80022a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
 80022a2:	e032      	b.n	800230a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f003 0304 	and.w	r3, r3, #4
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d008      	beq.n	80022c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022b0:	4b19      	ldr	r3, [pc, #100]	@ (8002318 <HAL_RCC_ClockConfig+0x1bc>)
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	4916      	ldr	r1, [pc, #88]	@ (8002318 <HAL_RCC_ClockConfig+0x1bc>)
 80022be:	4313      	orrs	r3, r2
 80022c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 0308 	and.w	r3, r3, #8
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d009      	beq.n	80022e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022ce:	4b12      	ldr	r3, [pc, #72]	@ (8002318 <HAL_RCC_ClockConfig+0x1bc>)
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	691b      	ldr	r3, [r3, #16]
 80022da:	00db      	lsls	r3, r3, #3
 80022dc:	490e      	ldr	r1, [pc, #56]	@ (8002318 <HAL_RCC_ClockConfig+0x1bc>)
 80022de:	4313      	orrs	r3, r2
 80022e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80022e2:	f000 f821 	bl	8002328 <HAL_RCC_GetSysClockFreq>
 80022e6:	4602      	mov	r2, r0
 80022e8:	4b0b      	ldr	r3, [pc, #44]	@ (8002318 <HAL_RCC_ClockConfig+0x1bc>)
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	091b      	lsrs	r3, r3, #4
 80022ee:	f003 030f 	and.w	r3, r3, #15
 80022f2:	490a      	ldr	r1, [pc, #40]	@ (800231c <HAL_RCC_ClockConfig+0x1c0>)
 80022f4:	5ccb      	ldrb	r3, [r1, r3]
 80022f6:	fa22 f303 	lsr.w	r3, r2, r3
 80022fa:	4a09      	ldr	r2, [pc, #36]	@ (8002320 <HAL_RCC_ClockConfig+0x1c4>)
 80022fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80022fe:	4b09      	ldr	r3, [pc, #36]	@ (8002324 <HAL_RCC_ClockConfig+0x1c8>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4618      	mov	r0, r3
 8002304:	f7fe fb28 	bl	8000958 <HAL_InitTick>

  return HAL_OK;
 8002308:	2300      	movs	r3, #0
}
 800230a:	4618      	mov	r0, r3
 800230c:	3710      	adds	r7, #16
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	40023c00 	.word	0x40023c00
 8002318:	40023800 	.word	0x40023800
 800231c:	080025ac 	.word	0x080025ac
 8002320:	20000000 	.word	0x20000000
 8002324:	20000004 	.word	0x20000004

08002328 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002328:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800232c:	b094      	sub	sp, #80	@ 0x50
 800232e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002330:	2300      	movs	r3, #0
 8002332:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002334:	2300      	movs	r3, #0
 8002336:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002338:	2300      	movs	r3, #0
 800233a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800233c:	2300      	movs	r3, #0
 800233e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002340:	4b79      	ldr	r3, [pc, #484]	@ (8002528 <HAL_RCC_GetSysClockFreq+0x200>)
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	f003 030c 	and.w	r3, r3, #12
 8002348:	2b08      	cmp	r3, #8
 800234a:	d00d      	beq.n	8002368 <HAL_RCC_GetSysClockFreq+0x40>
 800234c:	2b08      	cmp	r3, #8
 800234e:	f200 80e1 	bhi.w	8002514 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002352:	2b00      	cmp	r3, #0
 8002354:	d002      	beq.n	800235c <HAL_RCC_GetSysClockFreq+0x34>
 8002356:	2b04      	cmp	r3, #4
 8002358:	d003      	beq.n	8002362 <HAL_RCC_GetSysClockFreq+0x3a>
 800235a:	e0db      	b.n	8002514 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800235c:	4b73      	ldr	r3, [pc, #460]	@ (800252c <HAL_RCC_GetSysClockFreq+0x204>)
 800235e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002360:	e0db      	b.n	800251a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002362:	4b73      	ldr	r3, [pc, #460]	@ (8002530 <HAL_RCC_GetSysClockFreq+0x208>)
 8002364:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002366:	e0d8      	b.n	800251a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002368:	4b6f      	ldr	r3, [pc, #444]	@ (8002528 <HAL_RCC_GetSysClockFreq+0x200>)
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002370:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002372:	4b6d      	ldr	r3, [pc, #436]	@ (8002528 <HAL_RCC_GetSysClockFreq+0x200>)
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800237a:	2b00      	cmp	r3, #0
 800237c:	d063      	beq.n	8002446 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800237e:	4b6a      	ldr	r3, [pc, #424]	@ (8002528 <HAL_RCC_GetSysClockFreq+0x200>)
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	099b      	lsrs	r3, r3, #6
 8002384:	2200      	movs	r2, #0
 8002386:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002388:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800238a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800238c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002390:	633b      	str	r3, [r7, #48]	@ 0x30
 8002392:	2300      	movs	r3, #0
 8002394:	637b      	str	r3, [r7, #52]	@ 0x34
 8002396:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800239a:	4622      	mov	r2, r4
 800239c:	462b      	mov	r3, r5
 800239e:	f04f 0000 	mov.w	r0, #0
 80023a2:	f04f 0100 	mov.w	r1, #0
 80023a6:	0159      	lsls	r1, r3, #5
 80023a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80023ac:	0150      	lsls	r0, r2, #5
 80023ae:	4602      	mov	r2, r0
 80023b0:	460b      	mov	r3, r1
 80023b2:	4621      	mov	r1, r4
 80023b4:	1a51      	subs	r1, r2, r1
 80023b6:	6139      	str	r1, [r7, #16]
 80023b8:	4629      	mov	r1, r5
 80023ba:	eb63 0301 	sbc.w	r3, r3, r1
 80023be:	617b      	str	r3, [r7, #20]
 80023c0:	f04f 0200 	mov.w	r2, #0
 80023c4:	f04f 0300 	mov.w	r3, #0
 80023c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80023cc:	4659      	mov	r1, fp
 80023ce:	018b      	lsls	r3, r1, #6
 80023d0:	4651      	mov	r1, sl
 80023d2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80023d6:	4651      	mov	r1, sl
 80023d8:	018a      	lsls	r2, r1, #6
 80023da:	4651      	mov	r1, sl
 80023dc:	ebb2 0801 	subs.w	r8, r2, r1
 80023e0:	4659      	mov	r1, fp
 80023e2:	eb63 0901 	sbc.w	r9, r3, r1
 80023e6:	f04f 0200 	mov.w	r2, #0
 80023ea:	f04f 0300 	mov.w	r3, #0
 80023ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80023f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80023f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80023fa:	4690      	mov	r8, r2
 80023fc:	4699      	mov	r9, r3
 80023fe:	4623      	mov	r3, r4
 8002400:	eb18 0303 	adds.w	r3, r8, r3
 8002404:	60bb      	str	r3, [r7, #8]
 8002406:	462b      	mov	r3, r5
 8002408:	eb49 0303 	adc.w	r3, r9, r3
 800240c:	60fb      	str	r3, [r7, #12]
 800240e:	f04f 0200 	mov.w	r2, #0
 8002412:	f04f 0300 	mov.w	r3, #0
 8002416:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800241a:	4629      	mov	r1, r5
 800241c:	024b      	lsls	r3, r1, #9
 800241e:	4621      	mov	r1, r4
 8002420:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002424:	4621      	mov	r1, r4
 8002426:	024a      	lsls	r2, r1, #9
 8002428:	4610      	mov	r0, r2
 800242a:	4619      	mov	r1, r3
 800242c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800242e:	2200      	movs	r2, #0
 8002430:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002432:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002434:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002438:	f7fd fec6 	bl	80001c8 <__aeabi_uldivmod>
 800243c:	4602      	mov	r2, r0
 800243e:	460b      	mov	r3, r1
 8002440:	4613      	mov	r3, r2
 8002442:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002444:	e058      	b.n	80024f8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002446:	4b38      	ldr	r3, [pc, #224]	@ (8002528 <HAL_RCC_GetSysClockFreq+0x200>)
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	099b      	lsrs	r3, r3, #6
 800244c:	2200      	movs	r2, #0
 800244e:	4618      	mov	r0, r3
 8002450:	4611      	mov	r1, r2
 8002452:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002456:	623b      	str	r3, [r7, #32]
 8002458:	2300      	movs	r3, #0
 800245a:	627b      	str	r3, [r7, #36]	@ 0x24
 800245c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002460:	4642      	mov	r2, r8
 8002462:	464b      	mov	r3, r9
 8002464:	f04f 0000 	mov.w	r0, #0
 8002468:	f04f 0100 	mov.w	r1, #0
 800246c:	0159      	lsls	r1, r3, #5
 800246e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002472:	0150      	lsls	r0, r2, #5
 8002474:	4602      	mov	r2, r0
 8002476:	460b      	mov	r3, r1
 8002478:	4641      	mov	r1, r8
 800247a:	ebb2 0a01 	subs.w	sl, r2, r1
 800247e:	4649      	mov	r1, r9
 8002480:	eb63 0b01 	sbc.w	fp, r3, r1
 8002484:	f04f 0200 	mov.w	r2, #0
 8002488:	f04f 0300 	mov.w	r3, #0
 800248c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002490:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002494:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002498:	ebb2 040a 	subs.w	r4, r2, sl
 800249c:	eb63 050b 	sbc.w	r5, r3, fp
 80024a0:	f04f 0200 	mov.w	r2, #0
 80024a4:	f04f 0300 	mov.w	r3, #0
 80024a8:	00eb      	lsls	r3, r5, #3
 80024aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80024ae:	00e2      	lsls	r2, r4, #3
 80024b0:	4614      	mov	r4, r2
 80024b2:	461d      	mov	r5, r3
 80024b4:	4643      	mov	r3, r8
 80024b6:	18e3      	adds	r3, r4, r3
 80024b8:	603b      	str	r3, [r7, #0]
 80024ba:	464b      	mov	r3, r9
 80024bc:	eb45 0303 	adc.w	r3, r5, r3
 80024c0:	607b      	str	r3, [r7, #4]
 80024c2:	f04f 0200 	mov.w	r2, #0
 80024c6:	f04f 0300 	mov.w	r3, #0
 80024ca:	e9d7 4500 	ldrd	r4, r5, [r7]
 80024ce:	4629      	mov	r1, r5
 80024d0:	028b      	lsls	r3, r1, #10
 80024d2:	4621      	mov	r1, r4
 80024d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80024d8:	4621      	mov	r1, r4
 80024da:	028a      	lsls	r2, r1, #10
 80024dc:	4610      	mov	r0, r2
 80024de:	4619      	mov	r1, r3
 80024e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80024e2:	2200      	movs	r2, #0
 80024e4:	61bb      	str	r3, [r7, #24]
 80024e6:	61fa      	str	r2, [r7, #28]
 80024e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80024ec:	f7fd fe6c 	bl	80001c8 <__aeabi_uldivmod>
 80024f0:	4602      	mov	r2, r0
 80024f2:	460b      	mov	r3, r1
 80024f4:	4613      	mov	r3, r2
 80024f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80024f8:	4b0b      	ldr	r3, [pc, #44]	@ (8002528 <HAL_RCC_GetSysClockFreq+0x200>)
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	0c1b      	lsrs	r3, r3, #16
 80024fe:	f003 0303 	and.w	r3, r3, #3
 8002502:	3301      	adds	r3, #1
 8002504:	005b      	lsls	r3, r3, #1
 8002506:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002508:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800250a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800250c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002510:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002512:	e002      	b.n	800251a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002514:	4b05      	ldr	r3, [pc, #20]	@ (800252c <HAL_RCC_GetSysClockFreq+0x204>)
 8002516:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002518:	bf00      	nop
    }
  }
  return sysclockfreq;
 800251a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800251c:	4618      	mov	r0, r3
 800251e:	3750      	adds	r7, #80	@ 0x50
 8002520:	46bd      	mov	sp, r7
 8002522:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002526:	bf00      	nop
 8002528:	40023800 	.word	0x40023800
 800252c:	00f42400 	.word	0x00f42400
 8002530:	007a1200 	.word	0x007a1200

08002534 <memset>:
 8002534:	4402      	add	r2, r0
 8002536:	4603      	mov	r3, r0
 8002538:	4293      	cmp	r3, r2
 800253a:	d100      	bne.n	800253e <memset+0xa>
 800253c:	4770      	bx	lr
 800253e:	f803 1b01 	strb.w	r1, [r3], #1
 8002542:	e7f9      	b.n	8002538 <memset+0x4>

08002544 <__libc_init_array>:
 8002544:	b570      	push	{r4, r5, r6, lr}
 8002546:	4d0d      	ldr	r5, [pc, #52]	@ (800257c <__libc_init_array+0x38>)
 8002548:	4c0d      	ldr	r4, [pc, #52]	@ (8002580 <__libc_init_array+0x3c>)
 800254a:	1b64      	subs	r4, r4, r5
 800254c:	10a4      	asrs	r4, r4, #2
 800254e:	2600      	movs	r6, #0
 8002550:	42a6      	cmp	r6, r4
 8002552:	d109      	bne.n	8002568 <__libc_init_array+0x24>
 8002554:	4d0b      	ldr	r5, [pc, #44]	@ (8002584 <__libc_init_array+0x40>)
 8002556:	4c0c      	ldr	r4, [pc, #48]	@ (8002588 <__libc_init_array+0x44>)
 8002558:	f000 f818 	bl	800258c <_init>
 800255c:	1b64      	subs	r4, r4, r5
 800255e:	10a4      	asrs	r4, r4, #2
 8002560:	2600      	movs	r6, #0
 8002562:	42a6      	cmp	r6, r4
 8002564:	d105      	bne.n	8002572 <__libc_init_array+0x2e>
 8002566:	bd70      	pop	{r4, r5, r6, pc}
 8002568:	f855 3b04 	ldr.w	r3, [r5], #4
 800256c:	4798      	blx	r3
 800256e:	3601      	adds	r6, #1
 8002570:	e7ee      	b.n	8002550 <__libc_init_array+0xc>
 8002572:	f855 3b04 	ldr.w	r3, [r5], #4
 8002576:	4798      	blx	r3
 8002578:	3601      	adds	r6, #1
 800257a:	e7f2      	b.n	8002562 <__libc_init_array+0x1e>
 800257c:	080025c4 	.word	0x080025c4
 8002580:	080025c4 	.word	0x080025c4
 8002584:	080025c4 	.word	0x080025c4
 8002588:	080025c8 	.word	0x080025c8

0800258c <_init>:
 800258c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800258e:	bf00      	nop
 8002590:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002592:	bc08      	pop	{r3}
 8002594:	469e      	mov	lr, r3
 8002596:	4770      	bx	lr

08002598 <_fini>:
 8002598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800259a:	bf00      	nop
 800259c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800259e:	bc08      	pop	{r3}
 80025a0:	469e      	mov	lr, r3
 80025a2:	4770      	bx	lr
